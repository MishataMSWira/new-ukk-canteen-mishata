
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Stan
 * 
 */
export type Stan = $Result.DefaultSelection<Prisma.$StanPayload>
/**
 * Model Siswa
 * 
 */
export type Siswa = $Result.DefaultSelection<Prisma.$SiswaPayload>
/**
 * Model Menu
 * 
 */
export type Menu = $Result.DefaultSelection<Prisma.$MenuPayload>
/**
 * Model Diskon
 * 
 */
export type Diskon = $Result.DefaultSelection<Prisma.$DiskonPayload>
/**
 * Model MenuDiskon
 * 
 */
export type MenuDiskon = $Result.DefaultSelection<Prisma.$MenuDiskonPayload>
/**
 * Model Transaksi
 * 
 */
export type Transaksi = $Result.DefaultSelection<Prisma.$TransaksiPayload>
/**
 * Model DetailTransaksi
 * 
 */
export type DetailTransaksi = $Result.DefaultSelection<Prisma.$DetailTransaksiPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ROLE: {
  admin_stan: 'admin_stan',
  siswa: 'siswa'
};

export type ROLE = (typeof ROLE)[keyof typeof ROLE]


export const JENIS: {
  makanan: 'makanan',
  minuman: 'minuman'
};

export type JENIS = (typeof JENIS)[keyof typeof JENIS]


export const STATUS: {
  belum_dikonfirmasi: 'belum_dikonfirmasi',
  dimasak: 'dimasak',
  diantar: 'diantar',
  sampai: 'sampai'
};

export type STATUS = (typeof STATUS)[keyof typeof STATUS]

}

export type ROLE = $Enums.ROLE

export const ROLE: typeof $Enums.ROLE

export type JENIS = $Enums.JENIS

export const JENIS: typeof $Enums.JENIS

export type STATUS = $Enums.STATUS

export const STATUS: typeof $Enums.STATUS

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.stan`: Exposes CRUD operations for the **Stan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stans
    * const stans = await prisma.stan.findMany()
    * ```
    */
  get stan(): Prisma.StanDelegate<ExtArgs>;

  /**
   * `prisma.siswa`: Exposes CRUD operations for the **Siswa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Siswas
    * const siswas = await prisma.siswa.findMany()
    * ```
    */
  get siswa(): Prisma.SiswaDelegate<ExtArgs>;

  /**
   * `prisma.menu`: Exposes CRUD operations for the **Menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menus
    * const menus = await prisma.menu.findMany()
    * ```
    */
  get menu(): Prisma.MenuDelegate<ExtArgs>;

  /**
   * `prisma.diskon`: Exposes CRUD operations for the **Diskon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diskons
    * const diskons = await prisma.diskon.findMany()
    * ```
    */
  get diskon(): Prisma.DiskonDelegate<ExtArgs>;

  /**
   * `prisma.menuDiskon`: Exposes CRUD operations for the **MenuDiskon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MenuDiskons
    * const menuDiskons = await prisma.menuDiskon.findMany()
    * ```
    */
  get menuDiskon(): Prisma.MenuDiskonDelegate<ExtArgs>;

  /**
   * `prisma.transaksi`: Exposes CRUD operations for the **Transaksi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transaksis
    * const transaksis = await prisma.transaksi.findMany()
    * ```
    */
  get transaksi(): Prisma.TransaksiDelegate<ExtArgs>;

  /**
   * `prisma.detailTransaksi`: Exposes CRUD operations for the **DetailTransaksi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DetailTransaksis
    * const detailTransaksis = await prisma.detailTransaksi.findMany()
    * ```
    */
  get detailTransaksi(): Prisma.DetailTransaksiDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Stan: 'Stan',
    Siswa: 'Siswa',
    Menu: 'Menu',
    Diskon: 'Diskon',
    MenuDiskon: 'MenuDiskon',
    Transaksi: 'Transaksi',
    DetailTransaksi: 'DetailTransaksi'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'stan' | 'siswa' | 'menu' | 'diskon' | 'menuDiskon' | 'transaksi' | 'detailTransaksi'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Stan: {
        payload: Prisma.$StanPayload<ExtArgs>
        fields: Prisma.StanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>
          }
          findFirst: {
            args: Prisma.StanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>
          }
          findMany: {
            args: Prisma.StanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>[]
          }
          create: {
            args: Prisma.StanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>
          }
          createMany: {
            args: Prisma.StanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>
          }
          update: {
            args: Prisma.StanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>
          }
          deleteMany: {
            args: Prisma.StanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StanPayload>
          }
          aggregate: {
            args: Prisma.StanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStan>
          }
          groupBy: {
            args: Prisma.StanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StanGroupByOutputType>[]
          }
          count: {
            args: Prisma.StanCountArgs<ExtArgs>,
            result: $Utils.Optional<StanCountAggregateOutputType> | number
          }
        }
      }
      Siswa: {
        payload: Prisma.$SiswaPayload<ExtArgs>
        fields: Prisma.SiswaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiswaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiswaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>
          }
          findFirst: {
            args: Prisma.SiswaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiswaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>
          }
          findMany: {
            args: Prisma.SiswaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>[]
          }
          create: {
            args: Prisma.SiswaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>
          }
          createMany: {
            args: Prisma.SiswaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SiswaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>
          }
          update: {
            args: Prisma.SiswaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>
          }
          deleteMany: {
            args: Prisma.SiswaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SiswaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SiswaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SiswaPayload>
          }
          aggregate: {
            args: Prisma.SiswaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSiswa>
          }
          groupBy: {
            args: Prisma.SiswaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SiswaGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiswaCountArgs<ExtArgs>,
            result: $Utils.Optional<SiswaCountAggregateOutputType> | number
          }
        }
      }
      Menu: {
        payload: Prisma.$MenuPayload<ExtArgs>
        fields: Prisma.MenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          findFirst: {
            args: Prisma.MenuFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          findMany: {
            args: Prisma.MenuFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>[]
          }
          create: {
            args: Prisma.MenuCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          createMany: {
            args: Prisma.MenuCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MenuDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          update: {
            args: Prisma.MenuUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          deleteMany: {
            args: Prisma.MenuDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MenuUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MenuUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          aggregate: {
            args: Prisma.MenuAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMenu>
          }
          groupBy: {
            args: Prisma.MenuGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuCountArgs<ExtArgs>,
            result: $Utils.Optional<MenuCountAggregateOutputType> | number
          }
        }
      }
      Diskon: {
        payload: Prisma.$DiskonPayload<ExtArgs>
        fields: Prisma.DiskonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiskonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiskonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>
          }
          findFirst: {
            args: Prisma.DiskonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiskonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>
          }
          findMany: {
            args: Prisma.DiskonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>[]
          }
          create: {
            args: Prisma.DiskonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>
          }
          createMany: {
            args: Prisma.DiskonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DiskonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>
          }
          update: {
            args: Prisma.DiskonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>
          }
          deleteMany: {
            args: Prisma.DiskonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DiskonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DiskonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiskonPayload>
          }
          aggregate: {
            args: Prisma.DiskonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDiskon>
          }
          groupBy: {
            args: Prisma.DiskonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DiskonGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiskonCountArgs<ExtArgs>,
            result: $Utils.Optional<DiskonCountAggregateOutputType> | number
          }
        }
      }
      MenuDiskon: {
        payload: Prisma.$MenuDiskonPayload<ExtArgs>
        fields: Prisma.MenuDiskonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuDiskonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuDiskonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>
          }
          findFirst: {
            args: Prisma.MenuDiskonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuDiskonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>
          }
          findMany: {
            args: Prisma.MenuDiskonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>[]
          }
          create: {
            args: Prisma.MenuDiskonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>
          }
          createMany: {
            args: Prisma.MenuDiskonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MenuDiskonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>
          }
          update: {
            args: Prisma.MenuDiskonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>
          }
          deleteMany: {
            args: Prisma.MenuDiskonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MenuDiskonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MenuDiskonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MenuDiskonPayload>
          }
          aggregate: {
            args: Prisma.MenuDiskonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMenuDiskon>
          }
          groupBy: {
            args: Prisma.MenuDiskonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MenuDiskonGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuDiskonCountArgs<ExtArgs>,
            result: $Utils.Optional<MenuDiskonCountAggregateOutputType> | number
          }
        }
      }
      Transaksi: {
        payload: Prisma.$TransaksiPayload<ExtArgs>
        fields: Prisma.TransaksiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransaksiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransaksiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          findFirst: {
            args: Prisma.TransaksiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransaksiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          findMany: {
            args: Prisma.TransaksiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>[]
          }
          create: {
            args: Prisma.TransaksiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          createMany: {
            args: Prisma.TransaksiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransaksiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          update: {
            args: Prisma.TransaksiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          deleteMany: {
            args: Prisma.TransaksiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransaksiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransaksiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          aggregate: {
            args: Prisma.TransaksiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransaksi>
          }
          groupBy: {
            args: Prisma.TransaksiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransaksiGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransaksiCountArgs<ExtArgs>,
            result: $Utils.Optional<TransaksiCountAggregateOutputType> | number
          }
        }
      }
      DetailTransaksi: {
        payload: Prisma.$DetailTransaksiPayload<ExtArgs>
        fields: Prisma.DetailTransaksiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DetailTransaksiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DetailTransaksiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>
          }
          findFirst: {
            args: Prisma.DetailTransaksiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DetailTransaksiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>
          }
          findMany: {
            args: Prisma.DetailTransaksiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>[]
          }
          create: {
            args: Prisma.DetailTransaksiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>
          }
          createMany: {
            args: Prisma.DetailTransaksiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DetailTransaksiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>
          }
          update: {
            args: Prisma.DetailTransaksiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>
          }
          deleteMany: {
            args: Prisma.DetailTransaksiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DetailTransaksiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DetailTransaksiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailTransaksiPayload>
          }
          aggregate: {
            args: Prisma.DetailTransaksiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDetailTransaksi>
          }
          groupBy: {
            args: Prisma.DetailTransaksiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DetailTransaksiGroupByOutputType>[]
          }
          count: {
            args: Prisma.DetailTransaksiCountArgs<ExtArgs>,
            result: $Utils.Optional<DetailTransaksiCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StanCountOutputType
   */

  export type StanCountOutputType = {
    Menu: number
    Transaksi: number
    Diskon: number
  }

  export type StanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Menu?: boolean | StanCountOutputTypeCountMenuArgs
    Transaksi?: boolean | StanCountOutputTypeCountTransaksiArgs
    Diskon?: boolean | StanCountOutputTypeCountDiskonArgs
  }

  // Custom InputTypes
  /**
   * StanCountOutputType without action
   */
  export type StanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StanCountOutputType
     */
    select?: StanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StanCountOutputType without action
   */
  export type StanCountOutputTypeCountMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
  }

  /**
   * StanCountOutputType without action
   */
  export type StanCountOutputTypeCountTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
  }

  /**
   * StanCountOutputType without action
   */
  export type StanCountOutputTypeCountDiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiskonWhereInput
  }


  /**
   * Count Type SiswaCountOutputType
   */

  export type SiswaCountOutputType = {
    Transaksi: number
  }

  export type SiswaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Transaksi?: boolean | SiswaCountOutputTypeCountTransaksiArgs
  }

  // Custom InputTypes
  /**
   * SiswaCountOutputType without action
   */
  export type SiswaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiswaCountOutputType
     */
    select?: SiswaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SiswaCountOutputType without action
   */
  export type SiswaCountOutputTypeCountTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
  }


  /**
   * Count Type MenuCountOutputType
   */

  export type MenuCountOutputType = {
    MenuDiskon: number
    DetailTransaksi: number
  }

  export type MenuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MenuDiskon?: boolean | MenuCountOutputTypeCountMenuDiskonArgs
    DetailTransaksi?: boolean | MenuCountOutputTypeCountDetailTransaksiArgs
  }

  // Custom InputTypes
  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCountOutputType
     */
    select?: MenuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeCountMenuDiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuDiskonWhereInput
  }

  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeCountDetailTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailTransaksiWhereInput
  }


  /**
   * Count Type DiskonCountOutputType
   */

  export type DiskonCountOutputType = {
    MenuDiskon: number
  }

  export type DiskonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MenuDiskon?: boolean | DiskonCountOutputTypeCountMenuDiskonArgs
  }

  // Custom InputTypes
  /**
   * DiskonCountOutputType without action
   */
  export type DiskonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiskonCountOutputType
     */
    select?: DiskonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiskonCountOutputType without action
   */
  export type DiskonCountOutputTypeCountMenuDiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuDiskonWhereInput
  }


  /**
   * Count Type TransaksiCountOutputType
   */

  export type TransaksiCountOutputType = {
    DetailTransaksi: number
  }

  export type TransaksiCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DetailTransaksi?: boolean | TransaksiCountOutputTypeCountDetailTransaksiArgs
  }

  // Custom InputTypes
  /**
   * TransaksiCountOutputType without action
   */
  export type TransaksiCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransaksiCountOutputType
     */
    select?: TransaksiCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransaksiCountOutputType without action
   */
  export type TransaksiCountOutputTypeCountDetailTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailTransaksiWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: $Enums.ROLE | null
    kode_verifikasi: string | null
    verifikasi_exp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: $Enums.ROLE | null
    kode_verifikasi: string | null
    verifikasi_exp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    kode_verifikasi: number
    verifikasi_exp: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    kode_verifikasi?: true
    verifikasi_exp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    kode_verifikasi?: true
    verifikasi_exp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    kode_verifikasi?: true
    verifikasi_exp?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    username: string
    password: string
    role: $Enums.ROLE
    kode_verifikasi: string | null
    verifikasi_exp: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    kode_verifikasi?: boolean
    verifikasi_exp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stan?: boolean | Users$stanArgs<ExtArgs>
    siswa?: boolean | Users$siswaArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    kode_verifikasi?: boolean
    verifikasi_exp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stan?: boolean | Users$stanArgs<ExtArgs>
    siswa?: boolean | Users$siswaArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      stan: Prisma.$StanPayload<ExtArgs> | null
      siswa: Prisma.$SiswaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      role: $Enums.ROLE
      kode_verifikasi: string | null
      verifikasi_exp: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stan<T extends Users$stanArgs<ExtArgs> = {}>(args?: Subset<T, Users$stanArgs<ExtArgs>>): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    siswa<T extends Users$siswaArgs<ExtArgs> = {}>(args?: Subset<T, Users$siswaArgs<ExtArgs>>): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly username: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'ROLE'>
    readonly kode_verifikasi: FieldRef<"Users", 'String'>
    readonly verifikasi_exp: FieldRef<"Users", 'DateTime'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.stan
   */
  export type Users$stanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    where?: StanWhereInput
  }

  /**
   * Users.siswa
   */
  export type Users$siswaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    where?: SiswaWhereInput
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Stan
   */

  export type AggregateStan = {
    _count: StanCountAggregateOutputType | null
    _avg: StanAvgAggregateOutputType | null
    _sum: StanSumAggregateOutputType | null
    _min: StanMinAggregateOutputType | null
    _max: StanMaxAggregateOutputType | null
  }

  export type StanAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type StanSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type StanMinAggregateOutputType = {
    id: number | null
    nama_stan: string | null
    nama_pemilik: string | null
    telp: string | null
    id_user: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StanMaxAggregateOutputType = {
    id: number | null
    nama_stan: string | null
    nama_pemilik: string | null
    telp: string | null
    id_user: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StanCountAggregateOutputType = {
    id: number
    nama_stan: number
    nama_pemilik: number
    telp: number
    id_user: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StanAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type StanSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type StanMinAggregateInputType = {
    id?: true
    nama_stan?: true
    nama_pemilik?: true
    telp?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StanMaxAggregateInputType = {
    id?: true
    nama_stan?: true
    nama_pemilik?: true
    telp?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StanCountAggregateInputType = {
    id?: true
    nama_stan?: true
    nama_pemilik?: true
    telp?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stan to aggregate.
     */
    where?: StanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stans to fetch.
     */
    orderBy?: StanOrderByWithRelationInput | StanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stans
    **/
    _count?: true | StanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StanMaxAggregateInputType
  }

  export type GetStanAggregateType<T extends StanAggregateArgs> = {
        [P in keyof T & keyof AggregateStan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStan[P]>
      : GetScalarType<T[P], AggregateStan[P]>
  }




  export type StanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StanWhereInput
    orderBy?: StanOrderByWithAggregationInput | StanOrderByWithAggregationInput[]
    by: StanScalarFieldEnum[] | StanScalarFieldEnum
    having?: StanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StanCountAggregateInputType | true
    _avg?: StanAvgAggregateInputType
    _sum?: StanSumAggregateInputType
    _min?: StanMinAggregateInputType
    _max?: StanMaxAggregateInputType
  }

  export type StanGroupByOutputType = {
    id: number
    nama_stan: string
    nama_pemilik: string
    telp: string
    id_user: number | null
    createdAt: Date
    updatedAt: Date
    _count: StanCountAggregateOutputType | null
    _avg: StanAvgAggregateOutputType | null
    _sum: StanSumAggregateOutputType | null
    _min: StanMinAggregateOutputType | null
    _max: StanMaxAggregateOutputType | null
  }

  type GetStanGroupByPayload<T extends StanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StanGroupByOutputType[P]>
            : GetScalarType<T[P], StanGroupByOutputType[P]>
        }
      >
    >


  export type StanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama_stan?: boolean
    nama_pemilik?: boolean
    telp?: boolean
    id_user?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Menu?: boolean | Stan$MenuArgs<ExtArgs>
    Transaksi?: boolean | Stan$TransaksiArgs<ExtArgs>
    Diskon?: boolean | Stan$DiskonArgs<ExtArgs>
    users?: boolean | Stan$usersArgs<ExtArgs>
    _count?: boolean | StanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stan"]>

  export type StanSelectScalar = {
    id?: boolean
    nama_stan?: boolean
    nama_pemilik?: boolean
    telp?: boolean
    id_user?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type StanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Menu?: boolean | Stan$MenuArgs<ExtArgs>
    Transaksi?: boolean | Stan$TransaksiArgs<ExtArgs>
    Diskon?: boolean | Stan$DiskonArgs<ExtArgs>
    users?: boolean | Stan$usersArgs<ExtArgs>
    _count?: boolean | StanCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stan"
    objects: {
      Menu: Prisma.$MenuPayload<ExtArgs>[]
      Transaksi: Prisma.$TransaksiPayload<ExtArgs>[]
      Diskon: Prisma.$DiskonPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama_stan: string
      nama_pemilik: string
      telp: string
      id_user: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stan"]>
    composites: {}
  }


  type StanGetPayload<S extends boolean | null | undefined | StanDefaultArgs> = $Result.GetResult<Prisma.$StanPayload, S>

  type StanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StanCountAggregateInputType | true
    }

  export interface StanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stan'], meta: { name: 'Stan' } }
    /**
     * Find zero or one Stan that matches the filter.
     * @param {StanFindUniqueArgs} args - Arguments to find a Stan
     * @example
     * // Get one Stan
     * const stan = await prisma.stan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StanFindUniqueArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Stan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StanFindUniqueOrThrowArgs} args - Arguments to find a Stan
     * @example
     * // Get one Stan
     * const stan = await prisma.stan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Stan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanFindFirstArgs} args - Arguments to find a Stan
     * @example
     * // Get one Stan
     * const stan = await prisma.stan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StanFindFirstArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Stan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanFindFirstOrThrowArgs} args - Arguments to find a Stan
     * @example
     * // Get one Stan
     * const stan = await prisma.stan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stans
     * const stans = await prisma.stan.findMany()
     * 
     * // Get first 10 Stans
     * const stans = await prisma.stan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stanWithIdOnly = await prisma.stan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Stan.
     * @param {StanCreateArgs} args - Arguments to create a Stan.
     * @example
     * // Create one Stan
     * const Stan = await prisma.stan.create({
     *   data: {
     *     // ... data to create a Stan
     *   }
     * })
     * 
    **/
    create<T extends StanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StanCreateArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stans.
     * @param {StanCreateManyArgs} args - Arguments to create many Stans.
     * @example
     * // Create many Stans
     * const stan = await prisma.stan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stan.
     * @param {StanDeleteArgs} args - Arguments to delete one Stan.
     * @example
     * // Delete one Stan
     * const Stan = await prisma.stan.delete({
     *   where: {
     *     // ... filter to delete one Stan
     *   }
     * })
     * 
    **/
    delete<T extends StanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StanDeleteArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Stan.
     * @param {StanUpdateArgs} args - Arguments to update one Stan.
     * @example
     * // Update one Stan
     * const stan = await prisma.stan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StanUpdateArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stans.
     * @param {StanDeleteManyArgs} args - Arguments to filter Stans to delete.
     * @example
     * // Delete a few Stans
     * const { count } = await prisma.stan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stans
     * const stan = await prisma.stan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stan.
     * @param {StanUpsertArgs} args - Arguments to update or create a Stan.
     * @example
     * // Update or create a Stan
     * const stan = await prisma.stan.upsert({
     *   create: {
     *     // ... data to create a Stan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stan we want to update
     *   }
     * })
    **/
    upsert<T extends StanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StanUpsertArgs<ExtArgs>>
    ): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanCountArgs} args - Arguments to filter Stans to count.
     * @example
     * // Count the number of Stans
     * const count = await prisma.stan.count({
     *   where: {
     *     // ... the filter for the Stans we want to count
     *   }
     * })
    **/
    count<T extends StanCountArgs>(
      args?: Subset<T, StanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StanAggregateArgs>(args: Subset<T, StanAggregateArgs>): Prisma.PrismaPromise<GetStanAggregateType<T>>

    /**
     * Group by Stan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StanGroupByArgs['orderBy'] }
        : { orderBy?: StanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stan model
   */
  readonly fields: StanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Menu<T extends Stan$MenuArgs<ExtArgs> = {}>(args?: Subset<T, Stan$MenuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findMany'> | Null>;

    Transaksi<T extends Stan$TransaksiArgs<ExtArgs> = {}>(args?: Subset<T, Stan$TransaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findMany'> | Null>;

    Diskon<T extends Stan$DiskonArgs<ExtArgs> = {}>(args?: Subset<T, Stan$DiskonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Stan$usersArgs<ExtArgs> = {}>(args?: Subset<T, Stan$usersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Stan model
   */ 
  interface StanFieldRefs {
    readonly id: FieldRef<"Stan", 'Int'>
    readonly nama_stan: FieldRef<"Stan", 'String'>
    readonly nama_pemilik: FieldRef<"Stan", 'String'>
    readonly telp: FieldRef<"Stan", 'String'>
    readonly id_user: FieldRef<"Stan", 'Int'>
    readonly createdAt: FieldRef<"Stan", 'DateTime'>
    readonly updatedAt: FieldRef<"Stan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stan findUnique
   */
  export type StanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * Filter, which Stan to fetch.
     */
    where: StanWhereUniqueInput
  }

  /**
   * Stan findUniqueOrThrow
   */
  export type StanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * Filter, which Stan to fetch.
     */
    where: StanWhereUniqueInput
  }

  /**
   * Stan findFirst
   */
  export type StanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * Filter, which Stan to fetch.
     */
    where?: StanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stans to fetch.
     */
    orderBy?: StanOrderByWithRelationInput | StanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stans.
     */
    cursor?: StanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stans.
     */
    distinct?: StanScalarFieldEnum | StanScalarFieldEnum[]
  }

  /**
   * Stan findFirstOrThrow
   */
  export type StanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * Filter, which Stan to fetch.
     */
    where?: StanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stans to fetch.
     */
    orderBy?: StanOrderByWithRelationInput | StanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stans.
     */
    cursor?: StanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stans.
     */
    distinct?: StanScalarFieldEnum | StanScalarFieldEnum[]
  }

  /**
   * Stan findMany
   */
  export type StanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * Filter, which Stans to fetch.
     */
    where?: StanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stans to fetch.
     */
    orderBy?: StanOrderByWithRelationInput | StanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stans.
     */
    cursor?: StanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stans.
     */
    skip?: number
    distinct?: StanScalarFieldEnum | StanScalarFieldEnum[]
  }

  /**
   * Stan create
   */
  export type StanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * The data needed to create a Stan.
     */
    data: XOR<StanCreateInput, StanUncheckedCreateInput>
  }

  /**
   * Stan createMany
   */
  export type StanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stans.
     */
    data: StanCreateManyInput | StanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stan update
   */
  export type StanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * The data needed to update a Stan.
     */
    data: XOR<StanUpdateInput, StanUncheckedUpdateInput>
    /**
     * Choose, which Stan to update.
     */
    where: StanWhereUniqueInput
  }

  /**
   * Stan updateMany
   */
  export type StanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stans.
     */
    data: XOR<StanUpdateManyMutationInput, StanUncheckedUpdateManyInput>
    /**
     * Filter which Stans to update
     */
    where?: StanWhereInput
  }

  /**
   * Stan upsert
   */
  export type StanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * The filter to search for the Stan to update in case it exists.
     */
    where: StanWhereUniqueInput
    /**
     * In case the Stan found by the `where` argument doesn't exist, create a new Stan with this data.
     */
    create: XOR<StanCreateInput, StanUncheckedCreateInput>
    /**
     * In case the Stan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StanUpdateInput, StanUncheckedUpdateInput>
  }

  /**
   * Stan delete
   */
  export type StanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
    /**
     * Filter which Stan to delete.
     */
    where: StanWhereUniqueInput
  }

  /**
   * Stan deleteMany
   */
  export type StanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stans to delete
     */
    where?: StanWhereInput
  }

  /**
   * Stan.Menu
   */
  export type Stan$MenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    cursor?: MenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Stan.Transaksi
   */
  export type Stan$TransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    cursor?: TransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Stan.Diskon
   */
  export type Stan$DiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    where?: DiskonWhereInput
    orderBy?: DiskonOrderByWithRelationInput | DiskonOrderByWithRelationInput[]
    cursor?: DiskonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiskonScalarFieldEnum | DiskonScalarFieldEnum[]
  }

  /**
   * Stan.users
   */
  export type Stan$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Stan without action
   */
  export type StanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stan
     */
    select?: StanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StanInclude<ExtArgs> | null
  }


  /**
   * Model Siswa
   */

  export type AggregateSiswa = {
    _count: SiswaCountAggregateOutputType | null
    _avg: SiswaAvgAggregateOutputType | null
    _sum: SiswaSumAggregateOutputType | null
    _min: SiswaMinAggregateOutputType | null
    _max: SiswaMaxAggregateOutputType | null
  }

  export type SiswaAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type SiswaSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type SiswaMinAggregateOutputType = {
    id: number | null
    nama_siswa: string | null
    alamat: string | null
    telp: string | null
    foto: string | null
    id_user: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiswaMaxAggregateOutputType = {
    id: number | null
    nama_siswa: string | null
    alamat: string | null
    telp: string | null
    foto: string | null
    id_user: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiswaCountAggregateOutputType = {
    id: number
    nama_siswa: number
    alamat: number
    telp: number
    foto: number
    id_user: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiswaAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type SiswaSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type SiswaMinAggregateInputType = {
    id?: true
    nama_siswa?: true
    alamat?: true
    telp?: true
    foto?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiswaMaxAggregateInputType = {
    id?: true
    nama_siswa?: true
    alamat?: true
    telp?: true
    foto?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiswaCountAggregateInputType = {
    id?: true
    nama_siswa?: true
    alamat?: true
    telp?: true
    foto?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiswaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Siswa to aggregate.
     */
    where?: SiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Siswas to fetch.
     */
    orderBy?: SiswaOrderByWithRelationInput | SiswaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Siswas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Siswas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Siswas
    **/
    _count?: true | SiswaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiswaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiswaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiswaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiswaMaxAggregateInputType
  }

  export type GetSiswaAggregateType<T extends SiswaAggregateArgs> = {
        [P in keyof T & keyof AggregateSiswa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiswa[P]>
      : GetScalarType<T[P], AggregateSiswa[P]>
  }




  export type SiswaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiswaWhereInput
    orderBy?: SiswaOrderByWithAggregationInput | SiswaOrderByWithAggregationInput[]
    by: SiswaScalarFieldEnum[] | SiswaScalarFieldEnum
    having?: SiswaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiswaCountAggregateInputType | true
    _avg?: SiswaAvgAggregateInputType
    _sum?: SiswaSumAggregateInputType
    _min?: SiswaMinAggregateInputType
    _max?: SiswaMaxAggregateInputType
  }

  export type SiswaGroupByOutputType = {
    id: number
    nama_siswa: string
    alamat: string
    telp: string
    foto: string
    id_user: number | null
    createdAt: Date
    updatedAt: Date
    _count: SiswaCountAggregateOutputType | null
    _avg: SiswaAvgAggregateOutputType | null
    _sum: SiswaSumAggregateOutputType | null
    _min: SiswaMinAggregateOutputType | null
    _max: SiswaMaxAggregateOutputType | null
  }

  type GetSiswaGroupByPayload<T extends SiswaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiswaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiswaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiswaGroupByOutputType[P]>
            : GetScalarType<T[P], SiswaGroupByOutputType[P]>
        }
      >
    >


  export type SiswaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama_siswa?: boolean
    alamat?: boolean
    telp?: boolean
    foto?: boolean
    id_user?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Transaksi?: boolean | Siswa$TransaksiArgs<ExtArgs>
    users?: boolean | Siswa$usersArgs<ExtArgs>
    _count?: boolean | SiswaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siswa"]>

  export type SiswaSelectScalar = {
    id?: boolean
    nama_siswa?: boolean
    alamat?: boolean
    telp?: boolean
    foto?: boolean
    id_user?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type SiswaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Transaksi?: boolean | Siswa$TransaksiArgs<ExtArgs>
    users?: boolean | Siswa$usersArgs<ExtArgs>
    _count?: boolean | SiswaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SiswaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Siswa"
    objects: {
      Transaksi: Prisma.$TransaksiPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama_siswa: string
      alamat: string
      telp: string
      foto: string
      id_user: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["siswa"]>
    composites: {}
  }


  type SiswaGetPayload<S extends boolean | null | undefined | SiswaDefaultArgs> = $Result.GetResult<Prisma.$SiswaPayload, S>

  type SiswaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SiswaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SiswaCountAggregateInputType | true
    }

  export interface SiswaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Siswa'], meta: { name: 'Siswa' } }
    /**
     * Find zero or one Siswa that matches the filter.
     * @param {SiswaFindUniqueArgs} args - Arguments to find a Siswa
     * @example
     * // Get one Siswa
     * const siswa = await prisma.siswa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiswaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SiswaFindUniqueArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Siswa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SiswaFindUniqueOrThrowArgs} args - Arguments to find a Siswa
     * @example
     * // Get one Siswa
     * const siswa = await prisma.siswa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiswaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiswaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Siswa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaFindFirstArgs} args - Arguments to find a Siswa
     * @example
     * // Get one Siswa
     * const siswa = await prisma.siswa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiswaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SiswaFindFirstArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Siswa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaFindFirstOrThrowArgs} args - Arguments to find a Siswa
     * @example
     * // Get one Siswa
     * const siswa = await prisma.siswa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiswaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiswaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Siswas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Siswas
     * const siswas = await prisma.siswa.findMany()
     * 
     * // Get first 10 Siswas
     * const siswas = await prisma.siswa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siswaWithIdOnly = await prisma.siswa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiswaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiswaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Siswa.
     * @param {SiswaCreateArgs} args - Arguments to create a Siswa.
     * @example
     * // Create one Siswa
     * const Siswa = await prisma.siswa.create({
     *   data: {
     *     // ... data to create a Siswa
     *   }
     * })
     * 
    **/
    create<T extends SiswaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SiswaCreateArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Siswas.
     * @param {SiswaCreateManyArgs} args - Arguments to create many Siswas.
     * @example
     * // Create many Siswas
     * const siswa = await prisma.siswa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SiswaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiswaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Siswa.
     * @param {SiswaDeleteArgs} args - Arguments to delete one Siswa.
     * @example
     * // Delete one Siswa
     * const Siswa = await prisma.siswa.delete({
     *   where: {
     *     // ... filter to delete one Siswa
     *   }
     * })
     * 
    **/
    delete<T extends SiswaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SiswaDeleteArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Siswa.
     * @param {SiswaUpdateArgs} args - Arguments to update one Siswa.
     * @example
     * // Update one Siswa
     * const siswa = await prisma.siswa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiswaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SiswaUpdateArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Siswas.
     * @param {SiswaDeleteManyArgs} args - Arguments to filter Siswas to delete.
     * @example
     * // Delete a few Siswas
     * const { count } = await prisma.siswa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiswaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiswaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Siswas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Siswas
     * const siswa = await prisma.siswa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiswaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SiswaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Siswa.
     * @param {SiswaUpsertArgs} args - Arguments to update or create a Siswa.
     * @example
     * // Update or create a Siswa
     * const siswa = await prisma.siswa.upsert({
     *   create: {
     *     // ... data to create a Siswa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Siswa we want to update
     *   }
     * })
    **/
    upsert<T extends SiswaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SiswaUpsertArgs<ExtArgs>>
    ): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Siswas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaCountArgs} args - Arguments to filter Siswas to count.
     * @example
     * // Count the number of Siswas
     * const count = await prisma.siswa.count({
     *   where: {
     *     // ... the filter for the Siswas we want to count
     *   }
     * })
    **/
    count<T extends SiswaCountArgs>(
      args?: Subset<T, SiswaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiswaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Siswa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiswaAggregateArgs>(args: Subset<T, SiswaAggregateArgs>): Prisma.PrismaPromise<GetSiswaAggregateType<T>>

    /**
     * Group by Siswa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiswaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiswaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiswaGroupByArgs['orderBy'] }
        : { orderBy?: SiswaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiswaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiswaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Siswa model
   */
  readonly fields: SiswaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Siswa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiswaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Transaksi<T extends Siswa$TransaksiArgs<ExtArgs> = {}>(args?: Subset<T, Siswa$TransaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Siswa$usersArgs<ExtArgs> = {}>(args?: Subset<T, Siswa$usersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Siswa model
   */ 
  interface SiswaFieldRefs {
    readonly id: FieldRef<"Siswa", 'Int'>
    readonly nama_siswa: FieldRef<"Siswa", 'String'>
    readonly alamat: FieldRef<"Siswa", 'String'>
    readonly telp: FieldRef<"Siswa", 'String'>
    readonly foto: FieldRef<"Siswa", 'String'>
    readonly id_user: FieldRef<"Siswa", 'Int'>
    readonly createdAt: FieldRef<"Siswa", 'DateTime'>
    readonly updatedAt: FieldRef<"Siswa", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Siswa findUnique
   */
  export type SiswaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * Filter, which Siswa to fetch.
     */
    where: SiswaWhereUniqueInput
  }

  /**
   * Siswa findUniqueOrThrow
   */
  export type SiswaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * Filter, which Siswa to fetch.
     */
    where: SiswaWhereUniqueInput
  }

  /**
   * Siswa findFirst
   */
  export type SiswaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * Filter, which Siswa to fetch.
     */
    where?: SiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Siswas to fetch.
     */
    orderBy?: SiswaOrderByWithRelationInput | SiswaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Siswas.
     */
    cursor?: SiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Siswas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Siswas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Siswas.
     */
    distinct?: SiswaScalarFieldEnum | SiswaScalarFieldEnum[]
  }

  /**
   * Siswa findFirstOrThrow
   */
  export type SiswaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * Filter, which Siswa to fetch.
     */
    where?: SiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Siswas to fetch.
     */
    orderBy?: SiswaOrderByWithRelationInput | SiswaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Siswas.
     */
    cursor?: SiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Siswas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Siswas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Siswas.
     */
    distinct?: SiswaScalarFieldEnum | SiswaScalarFieldEnum[]
  }

  /**
   * Siswa findMany
   */
  export type SiswaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * Filter, which Siswas to fetch.
     */
    where?: SiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Siswas to fetch.
     */
    orderBy?: SiswaOrderByWithRelationInput | SiswaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Siswas.
     */
    cursor?: SiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Siswas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Siswas.
     */
    skip?: number
    distinct?: SiswaScalarFieldEnum | SiswaScalarFieldEnum[]
  }

  /**
   * Siswa create
   */
  export type SiswaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * The data needed to create a Siswa.
     */
    data: XOR<SiswaCreateInput, SiswaUncheckedCreateInput>
  }

  /**
   * Siswa createMany
   */
  export type SiswaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Siswas.
     */
    data: SiswaCreateManyInput | SiswaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Siswa update
   */
  export type SiswaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * The data needed to update a Siswa.
     */
    data: XOR<SiswaUpdateInput, SiswaUncheckedUpdateInput>
    /**
     * Choose, which Siswa to update.
     */
    where: SiswaWhereUniqueInput
  }

  /**
   * Siswa updateMany
   */
  export type SiswaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Siswas.
     */
    data: XOR<SiswaUpdateManyMutationInput, SiswaUncheckedUpdateManyInput>
    /**
     * Filter which Siswas to update
     */
    where?: SiswaWhereInput
  }

  /**
   * Siswa upsert
   */
  export type SiswaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * The filter to search for the Siswa to update in case it exists.
     */
    where: SiswaWhereUniqueInput
    /**
     * In case the Siswa found by the `where` argument doesn't exist, create a new Siswa with this data.
     */
    create: XOR<SiswaCreateInput, SiswaUncheckedCreateInput>
    /**
     * In case the Siswa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiswaUpdateInput, SiswaUncheckedUpdateInput>
  }

  /**
   * Siswa delete
   */
  export type SiswaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
    /**
     * Filter which Siswa to delete.
     */
    where: SiswaWhereUniqueInput
  }

  /**
   * Siswa deleteMany
   */
  export type SiswaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Siswas to delete
     */
    where?: SiswaWhereInput
  }

  /**
   * Siswa.Transaksi
   */
  export type Siswa$TransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    cursor?: TransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Siswa.users
   */
  export type Siswa$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Siswa without action
   */
  export type SiswaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Siswa
     */
    select?: SiswaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiswaInclude<ExtArgs> | null
  }


  /**
   * Model Menu
   */

  export type AggregateMenu = {
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  export type MenuAvgAggregateOutputType = {
    id: number | null
    harga: number | null
    id_stan: number | null
  }

  export type MenuSumAggregateOutputType = {
    id: number | null
    harga: number | null
    id_stan: number | null
  }

  export type MenuMinAggregateOutputType = {
    id: number | null
    nama_makanan: string | null
    jenis: $Enums.JENIS | null
    harga: number | null
    foto: string | null
    deskripsi: string | null
    id_stan: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuMaxAggregateOutputType = {
    id: number | null
    nama_makanan: string | null
    jenis: $Enums.JENIS | null
    harga: number | null
    foto: string | null
    deskripsi: string | null
    id_stan: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuCountAggregateOutputType = {
    id: number
    nama_makanan: number
    jenis: number
    harga: number
    foto: number
    deskripsi: number
    id_stan: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MenuAvgAggregateInputType = {
    id?: true
    harga?: true
    id_stan?: true
  }

  export type MenuSumAggregateInputType = {
    id?: true
    harga?: true
    id_stan?: true
  }

  export type MenuMinAggregateInputType = {
    id?: true
    nama_makanan?: true
    jenis?: true
    harga?: true
    foto?: true
    deskripsi?: true
    id_stan?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuMaxAggregateInputType = {
    id?: true
    nama_makanan?: true
    jenis?: true
    harga?: true
    foto?: true
    deskripsi?: true
    id_stan?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuCountAggregateInputType = {
    id?: true
    nama_makanan?: true
    jenis?: true
    harga?: true
    foto?: true
    deskripsi?: true
    id_stan?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Menu to aggregate.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Menus
    **/
    _count?: true | MenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuMaxAggregateInputType
  }

  export type GetMenuAggregateType<T extends MenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu[P]>
      : GetScalarType<T[P], AggregateMenu[P]>
  }




  export type MenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithAggregationInput | MenuOrderByWithAggregationInput[]
    by: MenuScalarFieldEnum[] | MenuScalarFieldEnum
    having?: MenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuCountAggregateInputType | true
    _avg?: MenuAvgAggregateInputType
    _sum?: MenuSumAggregateInputType
    _min?: MenuMinAggregateInputType
    _max?: MenuMaxAggregateInputType
  }

  export type MenuGroupByOutputType = {
    id: number
    nama_makanan: string
    jenis: $Enums.JENIS
    harga: number
    foto: string
    deskripsi: string
    id_stan: number
    createdAt: Date
    updatedAt: Date
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  type GetMenuGroupByPayload<T extends MenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuGroupByOutputType[P]>
            : GetScalarType<T[P], MenuGroupByOutputType[P]>
        }
      >
    >


  export type MenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama_makanan?: boolean
    jenis?: boolean
    harga?: boolean
    foto?: boolean
    deskripsi?: boolean
    id_stan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stan_detail?: boolean | StanDefaultArgs<ExtArgs>
    MenuDiskon?: boolean | Menu$MenuDiskonArgs<ExtArgs>
    DetailTransaksi?: boolean | Menu$DetailTransaksiArgs<ExtArgs>
    _count?: boolean | MenuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menu"]>

  export type MenuSelectScalar = {
    id?: boolean
    nama_makanan?: boolean
    jenis?: boolean
    harga?: boolean
    foto?: boolean
    deskripsi?: boolean
    id_stan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type MenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stan_detail?: boolean | StanDefaultArgs<ExtArgs>
    MenuDiskon?: boolean | Menu$MenuDiskonArgs<ExtArgs>
    DetailTransaksi?: boolean | Menu$DetailTransaksiArgs<ExtArgs>
    _count?: boolean | MenuCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Menu"
    objects: {
      stan_detail: Prisma.$StanPayload<ExtArgs>
      MenuDiskon: Prisma.$MenuDiskonPayload<ExtArgs>[]
      DetailTransaksi: Prisma.$DetailTransaksiPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama_makanan: string
      jenis: $Enums.JENIS
      harga: number
      foto: string
      deskripsi: string
      id_stan: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["menu"]>
    composites: {}
  }


  type MenuGetPayload<S extends boolean | null | undefined | MenuDefaultArgs> = $Result.GetResult<Prisma.$MenuPayload, S>

  type MenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MenuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MenuCountAggregateInputType | true
    }

  export interface MenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Menu'], meta: { name: 'Menu' } }
    /**
     * Find zero or one Menu that matches the filter.
     * @param {MenuFindUniqueArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MenuFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MenuFindUniqueArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Menu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MenuFindUniqueOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MenuFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindFirstArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MenuFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuFindFirstArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Menu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindFirstOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MenuFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menus
     * const menus = await prisma.menu.findMany()
     * 
     * // Get first 10 Menus
     * const menus = await prisma.menu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuWithIdOnly = await prisma.menu.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MenuFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Menu.
     * @param {MenuCreateArgs} args - Arguments to create a Menu.
     * @example
     * // Create one Menu
     * const Menu = await prisma.menu.create({
     *   data: {
     *     // ... data to create a Menu
     *   }
     * })
     * 
    **/
    create<T extends MenuCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MenuCreateArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Menus.
     * @param {MenuCreateManyArgs} args - Arguments to create many Menus.
     * @example
     * // Create many Menus
     * const menu = await prisma.menu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MenuCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Menu.
     * @param {MenuDeleteArgs} args - Arguments to delete one Menu.
     * @example
     * // Delete one Menu
     * const Menu = await prisma.menu.delete({
     *   where: {
     *     // ... filter to delete one Menu
     *   }
     * })
     * 
    **/
    delete<T extends MenuDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDeleteArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Menu.
     * @param {MenuUpdateArgs} args - Arguments to update one Menu.
     * @example
     * // Update one Menu
     * const menu = await prisma.menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MenuUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MenuUpdateArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Menus.
     * @param {MenuDeleteManyArgs} args - Arguments to filter Menus to delete.
     * @example
     * // Delete a few Menus
     * const { count } = await prisma.menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MenuDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menus
     * const menu = await prisma.menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MenuUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MenuUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu.
     * @param {MenuUpsertArgs} args - Arguments to update or create a Menu.
     * @example
     * // Update or create a Menu
     * const menu = await prisma.menu.upsert({
     *   create: {
     *     // ... data to create a Menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu we want to update
     *   }
     * })
    **/
    upsert<T extends MenuUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MenuUpsertArgs<ExtArgs>>
    ): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCountArgs} args - Arguments to filter Menus to count.
     * @example
     * // Count the number of Menus
     * const count = await prisma.menu.count({
     *   where: {
     *     // ... the filter for the Menus we want to count
     *   }
     * })
    **/
    count<T extends MenuCountArgs>(
      args?: Subset<T, MenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuAggregateArgs>(args: Subset<T, MenuAggregateArgs>): Prisma.PrismaPromise<GetMenuAggregateType<T>>

    /**
     * Group by Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuGroupByArgs['orderBy'] }
        : { orderBy?: MenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Menu model
   */
  readonly fields: MenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stan_detail<T extends StanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StanDefaultArgs<ExtArgs>>): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    MenuDiskon<T extends Menu$MenuDiskonArgs<ExtArgs> = {}>(args?: Subset<T, Menu$MenuDiskonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findMany'> | Null>;

    DetailTransaksi<T extends Menu$DetailTransaksiArgs<ExtArgs> = {}>(args?: Subset<T, Menu$DetailTransaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Menu model
   */ 
  interface MenuFieldRefs {
    readonly id: FieldRef<"Menu", 'Int'>
    readonly nama_makanan: FieldRef<"Menu", 'String'>
    readonly jenis: FieldRef<"Menu", 'JENIS'>
    readonly harga: FieldRef<"Menu", 'Float'>
    readonly foto: FieldRef<"Menu", 'String'>
    readonly deskripsi: FieldRef<"Menu", 'String'>
    readonly id_stan: FieldRef<"Menu", 'Int'>
    readonly createdAt: FieldRef<"Menu", 'DateTime'>
    readonly updatedAt: FieldRef<"Menu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Menu findUnique
   */
  export type MenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu findUniqueOrThrow
   */
  export type MenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu findFirst
   */
  export type MenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu findFirstOrThrow
   */
  export type MenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu findMany
   */
  export type MenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menus to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu create
   */
  export type MenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The data needed to create a Menu.
     */
    data: XOR<MenuCreateInput, MenuUncheckedCreateInput>
  }

  /**
   * Menu createMany
   */
  export type MenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Menus.
     */
    data: MenuCreateManyInput | MenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Menu update
   */
  export type MenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The data needed to update a Menu.
     */
    data: XOR<MenuUpdateInput, MenuUncheckedUpdateInput>
    /**
     * Choose, which Menu to update.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu updateMany
   */
  export type MenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Menus.
     */
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyInput>
    /**
     * Filter which Menus to update
     */
    where?: MenuWhereInput
  }

  /**
   * Menu upsert
   */
  export type MenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The filter to search for the Menu to update in case it exists.
     */
    where: MenuWhereUniqueInput
    /**
     * In case the Menu found by the `where` argument doesn't exist, create a new Menu with this data.
     */
    create: XOR<MenuCreateInput, MenuUncheckedCreateInput>
    /**
     * In case the Menu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuUpdateInput, MenuUncheckedUpdateInput>
  }

  /**
   * Menu delete
   */
  export type MenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter which Menu to delete.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu deleteMany
   */
  export type MenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Menus to delete
     */
    where?: MenuWhereInput
  }

  /**
   * Menu.MenuDiskon
   */
  export type Menu$MenuDiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    where?: MenuDiskonWhereInput
    orderBy?: MenuDiskonOrderByWithRelationInput | MenuDiskonOrderByWithRelationInput[]
    cursor?: MenuDiskonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuDiskonScalarFieldEnum | MenuDiskonScalarFieldEnum[]
  }

  /**
   * Menu.DetailTransaksi
   */
  export type Menu$DetailTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    where?: DetailTransaksiWhereInput
    orderBy?: DetailTransaksiOrderByWithRelationInput | DetailTransaksiOrderByWithRelationInput[]
    cursor?: DetailTransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailTransaksiScalarFieldEnum | DetailTransaksiScalarFieldEnum[]
  }

  /**
   * Menu without action
   */
  export type MenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
  }


  /**
   * Model Diskon
   */

  export type AggregateDiskon = {
    _count: DiskonCountAggregateOutputType | null
    _avg: DiskonAvgAggregateOutputType | null
    _sum: DiskonSumAggregateOutputType | null
    _min: DiskonMinAggregateOutputType | null
    _max: DiskonMaxAggregateOutputType | null
  }

  export type DiskonAvgAggregateOutputType = {
    id: number | null
    id_stan: number | null
    persentase_diskon: number | null
  }

  export type DiskonSumAggregateOutputType = {
    id: number | null
    id_stan: number | null
    persentase_diskon: number | null
  }

  export type DiskonMinAggregateOutputType = {
    id: number | null
    id_stan: number | null
    nama_diskon: string | null
    persentase_diskon: number | null
    tanggal_awal: Date | null
    tanggal_akhir: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiskonMaxAggregateOutputType = {
    id: number | null
    id_stan: number | null
    nama_diskon: string | null
    persentase_diskon: number | null
    tanggal_awal: Date | null
    tanggal_akhir: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiskonCountAggregateOutputType = {
    id: number
    id_stan: number
    nama_diskon: number
    persentase_diskon: number
    tanggal_awal: number
    tanggal_akhir: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiskonAvgAggregateInputType = {
    id?: true
    id_stan?: true
    persentase_diskon?: true
  }

  export type DiskonSumAggregateInputType = {
    id?: true
    id_stan?: true
    persentase_diskon?: true
  }

  export type DiskonMinAggregateInputType = {
    id?: true
    id_stan?: true
    nama_diskon?: true
    persentase_diskon?: true
    tanggal_awal?: true
    tanggal_akhir?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiskonMaxAggregateInputType = {
    id?: true
    id_stan?: true
    nama_diskon?: true
    persentase_diskon?: true
    tanggal_awal?: true
    tanggal_akhir?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiskonCountAggregateInputType = {
    id?: true
    id_stan?: true
    nama_diskon?: true
    persentase_diskon?: true
    tanggal_awal?: true
    tanggal_akhir?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiskonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diskon to aggregate.
     */
    where?: DiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diskons to fetch.
     */
    orderBy?: DiskonOrderByWithRelationInput | DiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diskons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Diskons
    **/
    _count?: true | DiskonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiskonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiskonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiskonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiskonMaxAggregateInputType
  }

  export type GetDiskonAggregateType<T extends DiskonAggregateArgs> = {
        [P in keyof T & keyof AggregateDiskon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiskon[P]>
      : GetScalarType<T[P], AggregateDiskon[P]>
  }




  export type DiskonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiskonWhereInput
    orderBy?: DiskonOrderByWithAggregationInput | DiskonOrderByWithAggregationInput[]
    by: DiskonScalarFieldEnum[] | DiskonScalarFieldEnum
    having?: DiskonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiskonCountAggregateInputType | true
    _avg?: DiskonAvgAggregateInputType
    _sum?: DiskonSumAggregateInputType
    _min?: DiskonMinAggregateInputType
    _max?: DiskonMaxAggregateInputType
  }

  export type DiskonGroupByOutputType = {
    id: number
    id_stan: number
    nama_diskon: string
    persentase_diskon: number
    tanggal_awal: Date
    tanggal_akhir: Date
    createdAt: Date
    updatedAt: Date
    _count: DiskonCountAggregateOutputType | null
    _avg: DiskonAvgAggregateOutputType | null
    _sum: DiskonSumAggregateOutputType | null
    _min: DiskonMinAggregateOutputType | null
    _max: DiskonMaxAggregateOutputType | null
  }

  type GetDiskonGroupByPayload<T extends DiskonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiskonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiskonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiskonGroupByOutputType[P]>
            : GetScalarType<T[P], DiskonGroupByOutputType[P]>
        }
      >
    >


  export type DiskonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_stan?: boolean
    nama_diskon?: boolean
    persentase_diskon?: boolean
    tanggal_awal?: boolean
    tanggal_akhir?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stan_detail?: boolean | StanDefaultArgs<ExtArgs>
    MenuDiskon?: boolean | Diskon$MenuDiskonArgs<ExtArgs>
    _count?: boolean | DiskonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diskon"]>

  export type DiskonSelectScalar = {
    id?: boolean
    id_stan?: boolean
    nama_diskon?: boolean
    persentase_diskon?: boolean
    tanggal_awal?: boolean
    tanggal_akhir?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type DiskonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stan_detail?: boolean | StanDefaultArgs<ExtArgs>
    MenuDiskon?: boolean | Diskon$MenuDiskonArgs<ExtArgs>
    _count?: boolean | DiskonCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DiskonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Diskon"
    objects: {
      stan_detail: Prisma.$StanPayload<ExtArgs>
      MenuDiskon: Prisma.$MenuDiskonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_stan: number
      nama_diskon: string
      persentase_diskon: number
      tanggal_awal: Date
      tanggal_akhir: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["diskon"]>
    composites: {}
  }


  type DiskonGetPayload<S extends boolean | null | undefined | DiskonDefaultArgs> = $Result.GetResult<Prisma.$DiskonPayload, S>

  type DiskonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiskonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiskonCountAggregateInputType | true
    }

  export interface DiskonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Diskon'], meta: { name: 'Diskon' } }
    /**
     * Find zero or one Diskon that matches the filter.
     * @param {DiskonFindUniqueArgs} args - Arguments to find a Diskon
     * @example
     * // Get one Diskon
     * const diskon = await prisma.diskon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DiskonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DiskonFindUniqueArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Diskon that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiskonFindUniqueOrThrowArgs} args - Arguments to find a Diskon
     * @example
     * // Get one Diskon
     * const diskon = await prisma.diskon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DiskonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiskonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Diskon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonFindFirstArgs} args - Arguments to find a Diskon
     * @example
     * // Get one Diskon
     * const diskon = await prisma.diskon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DiskonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DiskonFindFirstArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Diskon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonFindFirstOrThrowArgs} args - Arguments to find a Diskon
     * @example
     * // Get one Diskon
     * const diskon = await prisma.diskon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DiskonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiskonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Diskons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diskons
     * const diskons = await prisma.diskon.findMany()
     * 
     * // Get first 10 Diskons
     * const diskons = await prisma.diskon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diskonWithIdOnly = await prisma.diskon.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DiskonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiskonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Diskon.
     * @param {DiskonCreateArgs} args - Arguments to create a Diskon.
     * @example
     * // Create one Diskon
     * const Diskon = await prisma.diskon.create({
     *   data: {
     *     // ... data to create a Diskon
     *   }
     * })
     * 
    **/
    create<T extends DiskonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DiskonCreateArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Diskons.
     * @param {DiskonCreateManyArgs} args - Arguments to create many Diskons.
     * @example
     * // Create many Diskons
     * const diskon = await prisma.diskon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DiskonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiskonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Diskon.
     * @param {DiskonDeleteArgs} args - Arguments to delete one Diskon.
     * @example
     * // Delete one Diskon
     * const Diskon = await prisma.diskon.delete({
     *   where: {
     *     // ... filter to delete one Diskon
     *   }
     * })
     * 
    **/
    delete<T extends DiskonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DiskonDeleteArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Diskon.
     * @param {DiskonUpdateArgs} args - Arguments to update one Diskon.
     * @example
     * // Update one Diskon
     * const diskon = await prisma.diskon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DiskonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DiskonUpdateArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Diskons.
     * @param {DiskonDeleteManyArgs} args - Arguments to filter Diskons to delete.
     * @example
     * // Delete a few Diskons
     * const { count } = await prisma.diskon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DiskonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiskonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diskons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diskons
     * const diskon = await prisma.diskon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DiskonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DiskonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Diskon.
     * @param {DiskonUpsertArgs} args - Arguments to update or create a Diskon.
     * @example
     * // Update or create a Diskon
     * const diskon = await prisma.diskon.upsert({
     *   create: {
     *     // ... data to create a Diskon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Diskon we want to update
     *   }
     * })
    **/
    upsert<T extends DiskonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DiskonUpsertArgs<ExtArgs>>
    ): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Diskons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonCountArgs} args - Arguments to filter Diskons to count.
     * @example
     * // Count the number of Diskons
     * const count = await prisma.diskon.count({
     *   where: {
     *     // ... the filter for the Diskons we want to count
     *   }
     * })
    **/
    count<T extends DiskonCountArgs>(
      args?: Subset<T, DiskonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiskonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Diskon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiskonAggregateArgs>(args: Subset<T, DiskonAggregateArgs>): Prisma.PrismaPromise<GetDiskonAggregateType<T>>

    /**
     * Group by Diskon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiskonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiskonGroupByArgs['orderBy'] }
        : { orderBy?: DiskonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiskonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiskonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Diskon model
   */
  readonly fields: DiskonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Diskon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiskonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stan_detail<T extends StanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StanDefaultArgs<ExtArgs>>): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    MenuDiskon<T extends Diskon$MenuDiskonArgs<ExtArgs> = {}>(args?: Subset<T, Diskon$MenuDiskonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Diskon model
   */ 
  interface DiskonFieldRefs {
    readonly id: FieldRef<"Diskon", 'Int'>
    readonly id_stan: FieldRef<"Diskon", 'Int'>
    readonly nama_diskon: FieldRef<"Diskon", 'String'>
    readonly persentase_diskon: FieldRef<"Diskon", 'Float'>
    readonly tanggal_awal: FieldRef<"Diskon", 'DateTime'>
    readonly tanggal_akhir: FieldRef<"Diskon", 'DateTime'>
    readonly createdAt: FieldRef<"Diskon", 'DateTime'>
    readonly updatedAt: FieldRef<"Diskon", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Diskon findUnique
   */
  export type DiskonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * Filter, which Diskon to fetch.
     */
    where: DiskonWhereUniqueInput
  }

  /**
   * Diskon findUniqueOrThrow
   */
  export type DiskonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * Filter, which Diskon to fetch.
     */
    where: DiskonWhereUniqueInput
  }

  /**
   * Diskon findFirst
   */
  export type DiskonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * Filter, which Diskon to fetch.
     */
    where?: DiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diskons to fetch.
     */
    orderBy?: DiskonOrderByWithRelationInput | DiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diskons.
     */
    cursor?: DiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diskons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diskons.
     */
    distinct?: DiskonScalarFieldEnum | DiskonScalarFieldEnum[]
  }

  /**
   * Diskon findFirstOrThrow
   */
  export type DiskonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * Filter, which Diskon to fetch.
     */
    where?: DiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diskons to fetch.
     */
    orderBy?: DiskonOrderByWithRelationInput | DiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diskons.
     */
    cursor?: DiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diskons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diskons.
     */
    distinct?: DiskonScalarFieldEnum | DiskonScalarFieldEnum[]
  }

  /**
   * Diskon findMany
   */
  export type DiskonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * Filter, which Diskons to fetch.
     */
    where?: DiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diskons to fetch.
     */
    orderBy?: DiskonOrderByWithRelationInput | DiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Diskons.
     */
    cursor?: DiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diskons.
     */
    skip?: number
    distinct?: DiskonScalarFieldEnum | DiskonScalarFieldEnum[]
  }

  /**
   * Diskon create
   */
  export type DiskonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * The data needed to create a Diskon.
     */
    data: XOR<DiskonCreateInput, DiskonUncheckedCreateInput>
  }

  /**
   * Diskon createMany
   */
  export type DiskonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Diskons.
     */
    data: DiskonCreateManyInput | DiskonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Diskon update
   */
  export type DiskonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * The data needed to update a Diskon.
     */
    data: XOR<DiskonUpdateInput, DiskonUncheckedUpdateInput>
    /**
     * Choose, which Diskon to update.
     */
    where: DiskonWhereUniqueInput
  }

  /**
   * Diskon updateMany
   */
  export type DiskonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Diskons.
     */
    data: XOR<DiskonUpdateManyMutationInput, DiskonUncheckedUpdateManyInput>
    /**
     * Filter which Diskons to update
     */
    where?: DiskonWhereInput
  }

  /**
   * Diskon upsert
   */
  export type DiskonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * The filter to search for the Diskon to update in case it exists.
     */
    where: DiskonWhereUniqueInput
    /**
     * In case the Diskon found by the `where` argument doesn't exist, create a new Diskon with this data.
     */
    create: XOR<DiskonCreateInput, DiskonUncheckedCreateInput>
    /**
     * In case the Diskon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiskonUpdateInput, DiskonUncheckedUpdateInput>
  }

  /**
   * Diskon delete
   */
  export type DiskonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
    /**
     * Filter which Diskon to delete.
     */
    where: DiskonWhereUniqueInput
  }

  /**
   * Diskon deleteMany
   */
  export type DiskonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diskons to delete
     */
    where?: DiskonWhereInput
  }

  /**
   * Diskon.MenuDiskon
   */
  export type Diskon$MenuDiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    where?: MenuDiskonWhereInput
    orderBy?: MenuDiskonOrderByWithRelationInput | MenuDiskonOrderByWithRelationInput[]
    cursor?: MenuDiskonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuDiskonScalarFieldEnum | MenuDiskonScalarFieldEnum[]
  }

  /**
   * Diskon without action
   */
  export type DiskonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diskon
     */
    select?: DiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiskonInclude<ExtArgs> | null
  }


  /**
   * Model MenuDiskon
   */

  export type AggregateMenuDiskon = {
    _count: MenuDiskonCountAggregateOutputType | null
    _avg: MenuDiskonAvgAggregateOutputType | null
    _sum: MenuDiskonSumAggregateOutputType | null
    _min: MenuDiskonMinAggregateOutputType | null
    _max: MenuDiskonMaxAggregateOutputType | null
  }

  export type MenuDiskonAvgAggregateOutputType = {
    id: number | null
    id_menu: number | null
    id_diskon: number | null
  }

  export type MenuDiskonSumAggregateOutputType = {
    id: number | null
    id_menu: number | null
    id_diskon: number | null
  }

  export type MenuDiskonMinAggregateOutputType = {
    id: number | null
    id_menu: number | null
    id_diskon: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuDiskonMaxAggregateOutputType = {
    id: number | null
    id_menu: number | null
    id_diskon: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuDiskonCountAggregateOutputType = {
    id: number
    id_menu: number
    id_diskon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MenuDiskonAvgAggregateInputType = {
    id?: true
    id_menu?: true
    id_diskon?: true
  }

  export type MenuDiskonSumAggregateInputType = {
    id?: true
    id_menu?: true
    id_diskon?: true
  }

  export type MenuDiskonMinAggregateInputType = {
    id?: true
    id_menu?: true
    id_diskon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuDiskonMaxAggregateInputType = {
    id?: true
    id_menu?: true
    id_diskon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuDiskonCountAggregateInputType = {
    id?: true
    id_menu?: true
    id_diskon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MenuDiskonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuDiskon to aggregate.
     */
    where?: MenuDiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuDiskons to fetch.
     */
    orderBy?: MenuDiskonOrderByWithRelationInput | MenuDiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuDiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuDiskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuDiskons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MenuDiskons
    **/
    _count?: true | MenuDiskonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuDiskonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuDiskonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuDiskonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuDiskonMaxAggregateInputType
  }

  export type GetMenuDiskonAggregateType<T extends MenuDiskonAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuDiskon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuDiskon[P]>
      : GetScalarType<T[P], AggregateMenuDiskon[P]>
  }




  export type MenuDiskonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuDiskonWhereInput
    orderBy?: MenuDiskonOrderByWithAggregationInput | MenuDiskonOrderByWithAggregationInput[]
    by: MenuDiskonScalarFieldEnum[] | MenuDiskonScalarFieldEnum
    having?: MenuDiskonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuDiskonCountAggregateInputType | true
    _avg?: MenuDiskonAvgAggregateInputType
    _sum?: MenuDiskonSumAggregateInputType
    _min?: MenuDiskonMinAggregateInputType
    _max?: MenuDiskonMaxAggregateInputType
  }

  export type MenuDiskonGroupByOutputType = {
    id: number
    id_menu: number
    id_diskon: number
    createdAt: Date
    updatedAt: Date
    _count: MenuDiskonCountAggregateOutputType | null
    _avg: MenuDiskonAvgAggregateOutputType | null
    _sum: MenuDiskonSumAggregateOutputType | null
    _min: MenuDiskonMinAggregateOutputType | null
    _max: MenuDiskonMaxAggregateOutputType | null
  }

  type GetMenuDiskonGroupByPayload<T extends MenuDiskonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuDiskonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuDiskonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuDiskonGroupByOutputType[P]>
            : GetScalarType<T[P], MenuDiskonGroupByOutputType[P]>
        }
      >
    >


  export type MenuDiskonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_menu?: boolean
    id_diskon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menu_detail?: boolean | MenuDefaultArgs<ExtArgs>
    diskon_detail?: boolean | DiskonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuDiskon"]>

  export type MenuDiskonSelectScalar = {
    id?: boolean
    id_menu?: boolean
    id_diskon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type MenuDiskonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu_detail?: boolean | MenuDefaultArgs<ExtArgs>
    diskon_detail?: boolean | DiskonDefaultArgs<ExtArgs>
  }


  export type $MenuDiskonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MenuDiskon"
    objects: {
      menu_detail: Prisma.$MenuPayload<ExtArgs>
      diskon_detail: Prisma.$DiskonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_menu: number
      id_diskon: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["menuDiskon"]>
    composites: {}
  }


  type MenuDiskonGetPayload<S extends boolean | null | undefined | MenuDiskonDefaultArgs> = $Result.GetResult<Prisma.$MenuDiskonPayload, S>

  type MenuDiskonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MenuDiskonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MenuDiskonCountAggregateInputType | true
    }

  export interface MenuDiskonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MenuDiskon'], meta: { name: 'MenuDiskon' } }
    /**
     * Find zero or one MenuDiskon that matches the filter.
     * @param {MenuDiskonFindUniqueArgs} args - Arguments to find a MenuDiskon
     * @example
     * // Get one MenuDiskon
     * const menuDiskon = await prisma.menuDiskon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MenuDiskonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDiskonFindUniqueArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MenuDiskon that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MenuDiskonFindUniqueOrThrowArgs} args - Arguments to find a MenuDiskon
     * @example
     * // Get one MenuDiskon
     * const menuDiskon = await prisma.menuDiskon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MenuDiskonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDiskonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MenuDiskon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonFindFirstArgs} args - Arguments to find a MenuDiskon
     * @example
     * // Get one MenuDiskon
     * const menuDiskon = await prisma.menuDiskon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MenuDiskonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDiskonFindFirstArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MenuDiskon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonFindFirstOrThrowArgs} args - Arguments to find a MenuDiskon
     * @example
     * // Get one MenuDiskon
     * const menuDiskon = await prisma.menuDiskon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MenuDiskonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDiskonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MenuDiskons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MenuDiskons
     * const menuDiskons = await prisma.menuDiskon.findMany()
     * 
     * // Get first 10 MenuDiskons
     * const menuDiskons = await prisma.menuDiskon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuDiskonWithIdOnly = await prisma.menuDiskon.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MenuDiskonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDiskonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MenuDiskon.
     * @param {MenuDiskonCreateArgs} args - Arguments to create a MenuDiskon.
     * @example
     * // Create one MenuDiskon
     * const MenuDiskon = await prisma.menuDiskon.create({
     *   data: {
     *     // ... data to create a MenuDiskon
     *   }
     * })
     * 
    **/
    create<T extends MenuDiskonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDiskonCreateArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MenuDiskons.
     * @param {MenuDiskonCreateManyArgs} args - Arguments to create many MenuDiskons.
     * @example
     * // Create many MenuDiskons
     * const menuDiskon = await prisma.menuDiskon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MenuDiskonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDiskonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MenuDiskon.
     * @param {MenuDiskonDeleteArgs} args - Arguments to delete one MenuDiskon.
     * @example
     * // Delete one MenuDiskon
     * const MenuDiskon = await prisma.menuDiskon.delete({
     *   where: {
     *     // ... filter to delete one MenuDiskon
     *   }
     * })
     * 
    **/
    delete<T extends MenuDiskonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDiskonDeleteArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MenuDiskon.
     * @param {MenuDiskonUpdateArgs} args - Arguments to update one MenuDiskon.
     * @example
     * // Update one MenuDiskon
     * const menuDiskon = await prisma.menuDiskon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MenuDiskonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDiskonUpdateArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MenuDiskons.
     * @param {MenuDiskonDeleteManyArgs} args - Arguments to filter MenuDiskons to delete.
     * @example
     * // Delete a few MenuDiskons
     * const { count } = await prisma.menuDiskon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MenuDiskonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MenuDiskonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuDiskons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MenuDiskons
     * const menuDiskon = await prisma.menuDiskon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MenuDiskonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDiskonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MenuDiskon.
     * @param {MenuDiskonUpsertArgs} args - Arguments to update or create a MenuDiskon.
     * @example
     * // Update or create a MenuDiskon
     * const menuDiskon = await prisma.menuDiskon.upsert({
     *   create: {
     *     // ... data to create a MenuDiskon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MenuDiskon we want to update
     *   }
     * })
    **/
    upsert<T extends MenuDiskonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MenuDiskonUpsertArgs<ExtArgs>>
    ): Prisma__MenuDiskonClient<$Result.GetResult<Prisma.$MenuDiskonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MenuDiskons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonCountArgs} args - Arguments to filter MenuDiskons to count.
     * @example
     * // Count the number of MenuDiskons
     * const count = await prisma.menuDiskon.count({
     *   where: {
     *     // ... the filter for the MenuDiskons we want to count
     *   }
     * })
    **/
    count<T extends MenuDiskonCountArgs>(
      args?: Subset<T, MenuDiskonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuDiskonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MenuDiskon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuDiskonAggregateArgs>(args: Subset<T, MenuDiskonAggregateArgs>): Prisma.PrismaPromise<GetMenuDiskonAggregateType<T>>

    /**
     * Group by MenuDiskon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuDiskonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuDiskonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuDiskonGroupByArgs['orderBy'] }
        : { orderBy?: MenuDiskonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuDiskonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuDiskonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MenuDiskon model
   */
  readonly fields: MenuDiskonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MenuDiskon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuDiskonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    menu_detail<T extends MenuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MenuDefaultArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    diskon_detail<T extends DiskonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiskonDefaultArgs<ExtArgs>>): Prisma__DiskonClient<$Result.GetResult<Prisma.$DiskonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MenuDiskon model
   */ 
  interface MenuDiskonFieldRefs {
    readonly id: FieldRef<"MenuDiskon", 'Int'>
    readonly id_menu: FieldRef<"MenuDiskon", 'Int'>
    readonly id_diskon: FieldRef<"MenuDiskon", 'Int'>
    readonly createdAt: FieldRef<"MenuDiskon", 'DateTime'>
    readonly updatedAt: FieldRef<"MenuDiskon", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MenuDiskon findUnique
   */
  export type MenuDiskonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * Filter, which MenuDiskon to fetch.
     */
    where: MenuDiskonWhereUniqueInput
  }

  /**
   * MenuDiskon findUniqueOrThrow
   */
  export type MenuDiskonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * Filter, which MenuDiskon to fetch.
     */
    where: MenuDiskonWhereUniqueInput
  }

  /**
   * MenuDiskon findFirst
   */
  export type MenuDiskonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * Filter, which MenuDiskon to fetch.
     */
    where?: MenuDiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuDiskons to fetch.
     */
    orderBy?: MenuDiskonOrderByWithRelationInput | MenuDiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuDiskons.
     */
    cursor?: MenuDiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuDiskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuDiskons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuDiskons.
     */
    distinct?: MenuDiskonScalarFieldEnum | MenuDiskonScalarFieldEnum[]
  }

  /**
   * MenuDiskon findFirstOrThrow
   */
  export type MenuDiskonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * Filter, which MenuDiskon to fetch.
     */
    where?: MenuDiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuDiskons to fetch.
     */
    orderBy?: MenuDiskonOrderByWithRelationInput | MenuDiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuDiskons.
     */
    cursor?: MenuDiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuDiskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuDiskons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuDiskons.
     */
    distinct?: MenuDiskonScalarFieldEnum | MenuDiskonScalarFieldEnum[]
  }

  /**
   * MenuDiskon findMany
   */
  export type MenuDiskonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * Filter, which MenuDiskons to fetch.
     */
    where?: MenuDiskonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuDiskons to fetch.
     */
    orderBy?: MenuDiskonOrderByWithRelationInput | MenuDiskonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MenuDiskons.
     */
    cursor?: MenuDiskonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuDiskons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuDiskons.
     */
    skip?: number
    distinct?: MenuDiskonScalarFieldEnum | MenuDiskonScalarFieldEnum[]
  }

  /**
   * MenuDiskon create
   */
  export type MenuDiskonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * The data needed to create a MenuDiskon.
     */
    data: XOR<MenuDiskonCreateInput, MenuDiskonUncheckedCreateInput>
  }

  /**
   * MenuDiskon createMany
   */
  export type MenuDiskonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MenuDiskons.
     */
    data: MenuDiskonCreateManyInput | MenuDiskonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MenuDiskon update
   */
  export type MenuDiskonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * The data needed to update a MenuDiskon.
     */
    data: XOR<MenuDiskonUpdateInput, MenuDiskonUncheckedUpdateInput>
    /**
     * Choose, which MenuDiskon to update.
     */
    where: MenuDiskonWhereUniqueInput
  }

  /**
   * MenuDiskon updateMany
   */
  export type MenuDiskonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MenuDiskons.
     */
    data: XOR<MenuDiskonUpdateManyMutationInput, MenuDiskonUncheckedUpdateManyInput>
    /**
     * Filter which MenuDiskons to update
     */
    where?: MenuDiskonWhereInput
  }

  /**
   * MenuDiskon upsert
   */
  export type MenuDiskonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * The filter to search for the MenuDiskon to update in case it exists.
     */
    where: MenuDiskonWhereUniqueInput
    /**
     * In case the MenuDiskon found by the `where` argument doesn't exist, create a new MenuDiskon with this data.
     */
    create: XOR<MenuDiskonCreateInput, MenuDiskonUncheckedCreateInput>
    /**
     * In case the MenuDiskon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuDiskonUpdateInput, MenuDiskonUncheckedUpdateInput>
  }

  /**
   * MenuDiskon delete
   */
  export type MenuDiskonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
    /**
     * Filter which MenuDiskon to delete.
     */
    where: MenuDiskonWhereUniqueInput
  }

  /**
   * MenuDiskon deleteMany
   */
  export type MenuDiskonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuDiskons to delete
     */
    where?: MenuDiskonWhereInput
  }

  /**
   * MenuDiskon without action
   */
  export type MenuDiskonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuDiskon
     */
    select?: MenuDiskonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuDiskonInclude<ExtArgs> | null
  }


  /**
   * Model Transaksi
   */

  export type AggregateTransaksi = {
    _count: TransaksiCountAggregateOutputType | null
    _avg: TransaksiAvgAggregateOutputType | null
    _sum: TransaksiSumAggregateOutputType | null
    _min: TransaksiMinAggregateOutputType | null
    _max: TransaksiMaxAggregateOutputType | null
  }

  export type TransaksiAvgAggregateOutputType = {
    id: number | null
    id_stan: number | null
    id_siswa: number | null
  }

  export type TransaksiSumAggregateOutputType = {
    id: number | null
    id_stan: number | null
    id_siswa: number | null
  }

  export type TransaksiMinAggregateOutputType = {
    id: number | null
    tanggal: Date | null
    id_stan: number | null
    id_siswa: number | null
    status: $Enums.STATUS | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransaksiMaxAggregateOutputType = {
    id: number | null
    tanggal: Date | null
    id_stan: number | null
    id_siswa: number | null
    status: $Enums.STATUS | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransaksiCountAggregateOutputType = {
    id: number
    tanggal: number
    id_stan: number
    id_siswa: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransaksiAvgAggregateInputType = {
    id?: true
    id_stan?: true
    id_siswa?: true
  }

  export type TransaksiSumAggregateInputType = {
    id?: true
    id_stan?: true
    id_siswa?: true
  }

  export type TransaksiMinAggregateInputType = {
    id?: true
    tanggal?: true
    id_stan?: true
    id_siswa?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransaksiMaxAggregateInputType = {
    id?: true
    tanggal?: true
    id_stan?: true
    id_siswa?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransaksiCountAggregateInputType = {
    id?: true
    tanggal?: true
    id_stan?: true
    id_siswa?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransaksiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaksi to aggregate.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transaksis
    **/
    _count?: true | TransaksiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransaksiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransaksiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransaksiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransaksiMaxAggregateInputType
  }

  export type GetTransaksiAggregateType<T extends TransaksiAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaksi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaksi[P]>
      : GetScalarType<T[P], AggregateTransaksi[P]>
  }




  export type TransaksiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithAggregationInput | TransaksiOrderByWithAggregationInput[]
    by: TransaksiScalarFieldEnum[] | TransaksiScalarFieldEnum
    having?: TransaksiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransaksiCountAggregateInputType | true
    _avg?: TransaksiAvgAggregateInputType
    _sum?: TransaksiSumAggregateInputType
    _min?: TransaksiMinAggregateInputType
    _max?: TransaksiMaxAggregateInputType
  }

  export type TransaksiGroupByOutputType = {
    id: number
    tanggal: Date
    id_stan: number
    id_siswa: number
    status: $Enums.STATUS
    createdAt: Date
    updatedAt: Date
    _count: TransaksiCountAggregateOutputType | null
    _avg: TransaksiAvgAggregateOutputType | null
    _sum: TransaksiSumAggregateOutputType | null
    _min: TransaksiMinAggregateOutputType | null
    _max: TransaksiMaxAggregateOutputType | null
  }

  type GetTransaksiGroupByPayload<T extends TransaksiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransaksiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransaksiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransaksiGroupByOutputType[P]>
            : GetScalarType<T[P], TransaksiGroupByOutputType[P]>
        }
      >
    >


  export type TransaksiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tanggal?: boolean
    id_stan?: boolean
    id_siswa?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stan_detail?: boolean | StanDefaultArgs<ExtArgs>
    siswa_detail?: boolean | SiswaDefaultArgs<ExtArgs>
    DetailTransaksi?: boolean | Transaksi$DetailTransaksiArgs<ExtArgs>
    _count?: boolean | TransaksiCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaksi"]>

  export type TransaksiSelectScalar = {
    id?: boolean
    tanggal?: boolean
    id_stan?: boolean
    id_siswa?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TransaksiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stan_detail?: boolean | StanDefaultArgs<ExtArgs>
    siswa_detail?: boolean | SiswaDefaultArgs<ExtArgs>
    DetailTransaksi?: boolean | Transaksi$DetailTransaksiArgs<ExtArgs>
    _count?: boolean | TransaksiCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TransaksiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaksi"
    objects: {
      stan_detail: Prisma.$StanPayload<ExtArgs>
      siswa_detail: Prisma.$SiswaPayload<ExtArgs>
      DetailTransaksi: Prisma.$DetailTransaksiPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tanggal: Date
      id_stan: number
      id_siswa: number
      status: $Enums.STATUS
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaksi"]>
    composites: {}
  }


  type TransaksiGetPayload<S extends boolean | null | undefined | TransaksiDefaultArgs> = $Result.GetResult<Prisma.$TransaksiPayload, S>

  type TransaksiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransaksiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransaksiCountAggregateInputType | true
    }

  export interface TransaksiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaksi'], meta: { name: 'Transaksi' } }
    /**
     * Find zero or one Transaksi that matches the filter.
     * @param {TransaksiFindUniqueArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransaksiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiFindUniqueArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transaksi that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransaksiFindUniqueOrThrowArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransaksiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transaksi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindFirstArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransaksiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindFirstArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transaksi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindFirstOrThrowArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransaksiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transaksis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transaksis
     * const transaksis = await prisma.transaksi.findMany()
     * 
     * // Get first 10 Transaksis
     * const transaksis = await prisma.transaksi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transaksiWithIdOnly = await prisma.transaksi.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransaksiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transaksi.
     * @param {TransaksiCreateArgs} args - Arguments to create a Transaksi.
     * @example
     * // Create one Transaksi
     * const Transaksi = await prisma.transaksi.create({
     *   data: {
     *     // ... data to create a Transaksi
     *   }
     * })
     * 
    **/
    create<T extends TransaksiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiCreateArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transaksis.
     * @param {TransaksiCreateManyArgs} args - Arguments to create many Transaksis.
     * @example
     * // Create many Transaksis
     * const transaksi = await prisma.transaksi.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TransaksiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaksi.
     * @param {TransaksiDeleteArgs} args - Arguments to delete one Transaksi.
     * @example
     * // Delete one Transaksi
     * const Transaksi = await prisma.transaksi.delete({
     *   where: {
     *     // ... filter to delete one Transaksi
     *   }
     * })
     * 
    **/
    delete<T extends TransaksiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiDeleteArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transaksi.
     * @param {TransaksiUpdateArgs} args - Arguments to update one Transaksi.
     * @example
     * // Update one Transaksi
     * const transaksi = await prisma.transaksi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransaksiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiUpdateArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transaksis.
     * @param {TransaksiDeleteManyArgs} args - Arguments to filter Transaksis to delete.
     * @example
     * // Delete a few Transaksis
     * const { count } = await prisma.transaksi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransaksiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transaksis
     * const transaksi = await prisma.transaksi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransaksiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaksi.
     * @param {TransaksiUpsertArgs} args - Arguments to update or create a Transaksi.
     * @example
     * // Update or create a Transaksi
     * const transaksi = await prisma.transaksi.upsert({
     *   create: {
     *     // ... data to create a Transaksi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaksi we want to update
     *   }
     * })
    **/
    upsert<T extends TransaksiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiUpsertArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiCountArgs} args - Arguments to filter Transaksis to count.
     * @example
     * // Count the number of Transaksis
     * const count = await prisma.transaksi.count({
     *   where: {
     *     // ... the filter for the Transaksis we want to count
     *   }
     * })
    **/
    count<T extends TransaksiCountArgs>(
      args?: Subset<T, TransaksiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransaksiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransaksiAggregateArgs>(args: Subset<T, TransaksiAggregateArgs>): Prisma.PrismaPromise<GetTransaksiAggregateType<T>>

    /**
     * Group by Transaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransaksiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransaksiGroupByArgs['orderBy'] }
        : { orderBy?: TransaksiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransaksiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransaksiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaksi model
   */
  readonly fields: TransaksiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaksi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransaksiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stan_detail<T extends StanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StanDefaultArgs<ExtArgs>>): Prisma__StanClient<$Result.GetResult<Prisma.$StanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    siswa_detail<T extends SiswaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiswaDefaultArgs<ExtArgs>>): Prisma__SiswaClient<$Result.GetResult<Prisma.$SiswaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    DetailTransaksi<T extends Transaksi$DetailTransaksiArgs<ExtArgs> = {}>(args?: Subset<T, Transaksi$DetailTransaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Transaksi model
   */ 
  interface TransaksiFieldRefs {
    readonly id: FieldRef<"Transaksi", 'Int'>
    readonly tanggal: FieldRef<"Transaksi", 'DateTime'>
    readonly id_stan: FieldRef<"Transaksi", 'Int'>
    readonly id_siswa: FieldRef<"Transaksi", 'Int'>
    readonly status: FieldRef<"Transaksi", 'STATUS'>
    readonly createdAt: FieldRef<"Transaksi", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaksi", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaksi findUnique
   */
  export type TransaksiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi findUniqueOrThrow
   */
  export type TransaksiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi findFirst
   */
  export type TransaksiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaksis.
     */
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi findFirstOrThrow
   */
  export type TransaksiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaksis.
     */
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi findMany
   */
  export type TransaksiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksis to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi create
   */
  export type TransaksiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaksi.
     */
    data: XOR<TransaksiCreateInput, TransaksiUncheckedCreateInput>
  }

  /**
   * Transaksi createMany
   */
  export type TransaksiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transaksis.
     */
    data: TransaksiCreateManyInput | TransaksiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaksi update
   */
  export type TransaksiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaksi.
     */
    data: XOR<TransaksiUpdateInput, TransaksiUncheckedUpdateInput>
    /**
     * Choose, which Transaksi to update.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi updateMany
   */
  export type TransaksiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transaksis.
     */
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyInput>
    /**
     * Filter which Transaksis to update
     */
    where?: TransaksiWhereInput
  }

  /**
   * Transaksi upsert
   */
  export type TransaksiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaksi to update in case it exists.
     */
    where: TransaksiWhereUniqueInput
    /**
     * In case the Transaksi found by the `where` argument doesn't exist, create a new Transaksi with this data.
     */
    create: XOR<TransaksiCreateInput, TransaksiUncheckedCreateInput>
    /**
     * In case the Transaksi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransaksiUpdateInput, TransaksiUncheckedUpdateInput>
  }

  /**
   * Transaksi delete
   */
  export type TransaksiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter which Transaksi to delete.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi deleteMany
   */
  export type TransaksiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaksis to delete
     */
    where?: TransaksiWhereInput
  }

  /**
   * Transaksi.DetailTransaksi
   */
  export type Transaksi$DetailTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    where?: DetailTransaksiWhereInput
    orderBy?: DetailTransaksiOrderByWithRelationInput | DetailTransaksiOrderByWithRelationInput[]
    cursor?: DetailTransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailTransaksiScalarFieldEnum | DetailTransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi without action
   */
  export type TransaksiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
  }


  /**
   * Model DetailTransaksi
   */

  export type AggregateDetailTransaksi = {
    _count: DetailTransaksiCountAggregateOutputType | null
    _avg: DetailTransaksiAvgAggregateOutputType | null
    _sum: DetailTransaksiSumAggregateOutputType | null
    _min: DetailTransaksiMinAggregateOutputType | null
    _max: DetailTransaksiMaxAggregateOutputType | null
  }

  export type DetailTransaksiAvgAggregateOutputType = {
    id: number | null
    id_transaksi: number | null
    id_menu: number | null
    qty: number | null
    harga_beli: number | null
  }

  export type DetailTransaksiSumAggregateOutputType = {
    id: number | null
    id_transaksi: number | null
    id_menu: number | null
    qty: number | null
    harga_beli: number | null
  }

  export type DetailTransaksiMinAggregateOutputType = {
    id: number | null
    id_transaksi: number | null
    id_menu: number | null
    qty: number | null
    harga_beli: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DetailTransaksiMaxAggregateOutputType = {
    id: number | null
    id_transaksi: number | null
    id_menu: number | null
    qty: number | null
    harga_beli: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DetailTransaksiCountAggregateOutputType = {
    id: number
    id_transaksi: number
    id_menu: number
    qty: number
    harga_beli: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DetailTransaksiAvgAggregateInputType = {
    id?: true
    id_transaksi?: true
    id_menu?: true
    qty?: true
    harga_beli?: true
  }

  export type DetailTransaksiSumAggregateInputType = {
    id?: true
    id_transaksi?: true
    id_menu?: true
    qty?: true
    harga_beli?: true
  }

  export type DetailTransaksiMinAggregateInputType = {
    id?: true
    id_transaksi?: true
    id_menu?: true
    qty?: true
    harga_beli?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DetailTransaksiMaxAggregateInputType = {
    id?: true
    id_transaksi?: true
    id_menu?: true
    qty?: true
    harga_beli?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DetailTransaksiCountAggregateInputType = {
    id?: true
    id_transaksi?: true
    id_menu?: true
    qty?: true
    harga_beli?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DetailTransaksiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetailTransaksi to aggregate.
     */
    where?: DetailTransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailTransaksis to fetch.
     */
    orderBy?: DetailTransaksiOrderByWithRelationInput | DetailTransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DetailTransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailTransaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailTransaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DetailTransaksis
    **/
    _count?: true | DetailTransaksiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetailTransaksiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetailTransaksiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetailTransaksiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetailTransaksiMaxAggregateInputType
  }

  export type GetDetailTransaksiAggregateType<T extends DetailTransaksiAggregateArgs> = {
        [P in keyof T & keyof AggregateDetailTransaksi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetailTransaksi[P]>
      : GetScalarType<T[P], AggregateDetailTransaksi[P]>
  }




  export type DetailTransaksiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailTransaksiWhereInput
    orderBy?: DetailTransaksiOrderByWithAggregationInput | DetailTransaksiOrderByWithAggregationInput[]
    by: DetailTransaksiScalarFieldEnum[] | DetailTransaksiScalarFieldEnum
    having?: DetailTransaksiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetailTransaksiCountAggregateInputType | true
    _avg?: DetailTransaksiAvgAggregateInputType
    _sum?: DetailTransaksiSumAggregateInputType
    _min?: DetailTransaksiMinAggregateInputType
    _max?: DetailTransaksiMaxAggregateInputType
  }

  export type DetailTransaksiGroupByOutputType = {
    id: number
    id_transaksi: number
    id_menu: number
    qty: number
    harga_beli: number
    createdAt: Date
    updatedAt: Date
    _count: DetailTransaksiCountAggregateOutputType | null
    _avg: DetailTransaksiAvgAggregateOutputType | null
    _sum: DetailTransaksiSumAggregateOutputType | null
    _min: DetailTransaksiMinAggregateOutputType | null
    _max: DetailTransaksiMaxAggregateOutputType | null
  }

  type GetDetailTransaksiGroupByPayload<T extends DetailTransaksiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DetailTransaksiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetailTransaksiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetailTransaksiGroupByOutputType[P]>
            : GetScalarType<T[P], DetailTransaksiGroupByOutputType[P]>
        }
      >
    >


  export type DetailTransaksiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_transaksi?: boolean
    id_menu?: boolean
    qty?: boolean
    harga_beli?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaksi_detail?: boolean | TransaksiDefaultArgs<ExtArgs>
    menu_detail?: boolean | MenuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["detailTransaksi"]>

  export type DetailTransaksiSelectScalar = {
    id?: boolean
    id_transaksi?: boolean
    id_menu?: boolean
    qty?: boolean
    harga_beli?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type DetailTransaksiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaksi_detail?: boolean | TransaksiDefaultArgs<ExtArgs>
    menu_detail?: boolean | MenuDefaultArgs<ExtArgs>
  }


  export type $DetailTransaksiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DetailTransaksi"
    objects: {
      transaksi_detail: Prisma.$TransaksiPayload<ExtArgs>
      menu_detail: Prisma.$MenuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_transaksi: number
      id_menu: number
      qty: number
      harga_beli: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["detailTransaksi"]>
    composites: {}
  }


  type DetailTransaksiGetPayload<S extends boolean | null | undefined | DetailTransaksiDefaultArgs> = $Result.GetResult<Prisma.$DetailTransaksiPayload, S>

  type DetailTransaksiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DetailTransaksiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DetailTransaksiCountAggregateInputType | true
    }

  export interface DetailTransaksiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DetailTransaksi'], meta: { name: 'DetailTransaksi' } }
    /**
     * Find zero or one DetailTransaksi that matches the filter.
     * @param {DetailTransaksiFindUniqueArgs} args - Arguments to find a DetailTransaksi
     * @example
     * // Get one DetailTransaksi
     * const detailTransaksi = await prisma.detailTransaksi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DetailTransaksiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DetailTransaksiFindUniqueArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DetailTransaksi that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DetailTransaksiFindUniqueOrThrowArgs} args - Arguments to find a DetailTransaksi
     * @example
     * // Get one DetailTransaksi
     * const detailTransaksi = await prisma.detailTransaksi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DetailTransaksiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailTransaksiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DetailTransaksi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiFindFirstArgs} args - Arguments to find a DetailTransaksi
     * @example
     * // Get one DetailTransaksi
     * const detailTransaksi = await prisma.detailTransaksi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DetailTransaksiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailTransaksiFindFirstArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DetailTransaksi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiFindFirstOrThrowArgs} args - Arguments to find a DetailTransaksi
     * @example
     * // Get one DetailTransaksi
     * const detailTransaksi = await prisma.detailTransaksi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DetailTransaksiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailTransaksiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DetailTransaksis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DetailTransaksis
     * const detailTransaksis = await prisma.detailTransaksi.findMany()
     * 
     * // Get first 10 DetailTransaksis
     * const detailTransaksis = await prisma.detailTransaksi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detailTransaksiWithIdOnly = await prisma.detailTransaksi.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DetailTransaksiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailTransaksiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DetailTransaksi.
     * @param {DetailTransaksiCreateArgs} args - Arguments to create a DetailTransaksi.
     * @example
     * // Create one DetailTransaksi
     * const DetailTransaksi = await prisma.detailTransaksi.create({
     *   data: {
     *     // ... data to create a DetailTransaksi
     *   }
     * })
     * 
    **/
    create<T extends DetailTransaksiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DetailTransaksiCreateArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DetailTransaksis.
     * @param {DetailTransaksiCreateManyArgs} args - Arguments to create many DetailTransaksis.
     * @example
     * // Create many DetailTransaksis
     * const detailTransaksi = await prisma.detailTransaksi.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DetailTransaksiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailTransaksiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DetailTransaksi.
     * @param {DetailTransaksiDeleteArgs} args - Arguments to delete one DetailTransaksi.
     * @example
     * // Delete one DetailTransaksi
     * const DetailTransaksi = await prisma.detailTransaksi.delete({
     *   where: {
     *     // ... filter to delete one DetailTransaksi
     *   }
     * })
     * 
    **/
    delete<T extends DetailTransaksiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DetailTransaksiDeleteArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DetailTransaksi.
     * @param {DetailTransaksiUpdateArgs} args - Arguments to update one DetailTransaksi.
     * @example
     * // Update one DetailTransaksi
     * const detailTransaksi = await prisma.detailTransaksi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DetailTransaksiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DetailTransaksiUpdateArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DetailTransaksis.
     * @param {DetailTransaksiDeleteManyArgs} args - Arguments to filter DetailTransaksis to delete.
     * @example
     * // Delete a few DetailTransaksis
     * const { count } = await prisma.detailTransaksi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DetailTransaksiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailTransaksiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetailTransaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DetailTransaksis
     * const detailTransaksi = await prisma.detailTransaksi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DetailTransaksiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DetailTransaksiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DetailTransaksi.
     * @param {DetailTransaksiUpsertArgs} args - Arguments to update or create a DetailTransaksi.
     * @example
     * // Update or create a DetailTransaksi
     * const detailTransaksi = await prisma.detailTransaksi.upsert({
     *   create: {
     *     // ... data to create a DetailTransaksi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DetailTransaksi we want to update
     *   }
     * })
    **/
    upsert<T extends DetailTransaksiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DetailTransaksiUpsertArgs<ExtArgs>>
    ): Prisma__DetailTransaksiClient<$Result.GetResult<Prisma.$DetailTransaksiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DetailTransaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiCountArgs} args - Arguments to filter DetailTransaksis to count.
     * @example
     * // Count the number of DetailTransaksis
     * const count = await prisma.detailTransaksi.count({
     *   where: {
     *     // ... the filter for the DetailTransaksis we want to count
     *   }
     * })
    **/
    count<T extends DetailTransaksiCountArgs>(
      args?: Subset<T, DetailTransaksiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetailTransaksiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DetailTransaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetailTransaksiAggregateArgs>(args: Subset<T, DetailTransaksiAggregateArgs>): Prisma.PrismaPromise<GetDetailTransaksiAggregateType<T>>

    /**
     * Group by DetailTransaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailTransaksiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetailTransaksiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetailTransaksiGroupByArgs['orderBy'] }
        : { orderBy?: DetailTransaksiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetailTransaksiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetailTransaksiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DetailTransaksi model
   */
  readonly fields: DetailTransaksiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DetailTransaksi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DetailTransaksiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    transaksi_detail<T extends TransaksiDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransaksiDefaultArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    menu_detail<T extends MenuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MenuDefaultArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DetailTransaksi model
   */ 
  interface DetailTransaksiFieldRefs {
    readonly id: FieldRef<"DetailTransaksi", 'Int'>
    readonly id_transaksi: FieldRef<"DetailTransaksi", 'Int'>
    readonly id_menu: FieldRef<"DetailTransaksi", 'Int'>
    readonly qty: FieldRef<"DetailTransaksi", 'Int'>
    readonly harga_beli: FieldRef<"DetailTransaksi", 'Float'>
    readonly createdAt: FieldRef<"DetailTransaksi", 'DateTime'>
    readonly updatedAt: FieldRef<"DetailTransaksi", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DetailTransaksi findUnique
   */
  export type DetailTransaksiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * Filter, which DetailTransaksi to fetch.
     */
    where: DetailTransaksiWhereUniqueInput
  }

  /**
   * DetailTransaksi findUniqueOrThrow
   */
  export type DetailTransaksiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * Filter, which DetailTransaksi to fetch.
     */
    where: DetailTransaksiWhereUniqueInput
  }

  /**
   * DetailTransaksi findFirst
   */
  export type DetailTransaksiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * Filter, which DetailTransaksi to fetch.
     */
    where?: DetailTransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailTransaksis to fetch.
     */
    orderBy?: DetailTransaksiOrderByWithRelationInput | DetailTransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailTransaksis.
     */
    cursor?: DetailTransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailTransaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailTransaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailTransaksis.
     */
    distinct?: DetailTransaksiScalarFieldEnum | DetailTransaksiScalarFieldEnum[]
  }

  /**
   * DetailTransaksi findFirstOrThrow
   */
  export type DetailTransaksiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * Filter, which DetailTransaksi to fetch.
     */
    where?: DetailTransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailTransaksis to fetch.
     */
    orderBy?: DetailTransaksiOrderByWithRelationInput | DetailTransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailTransaksis.
     */
    cursor?: DetailTransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailTransaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailTransaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailTransaksis.
     */
    distinct?: DetailTransaksiScalarFieldEnum | DetailTransaksiScalarFieldEnum[]
  }

  /**
   * DetailTransaksi findMany
   */
  export type DetailTransaksiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * Filter, which DetailTransaksis to fetch.
     */
    where?: DetailTransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailTransaksis to fetch.
     */
    orderBy?: DetailTransaksiOrderByWithRelationInput | DetailTransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DetailTransaksis.
     */
    cursor?: DetailTransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailTransaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailTransaksis.
     */
    skip?: number
    distinct?: DetailTransaksiScalarFieldEnum | DetailTransaksiScalarFieldEnum[]
  }

  /**
   * DetailTransaksi create
   */
  export type DetailTransaksiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * The data needed to create a DetailTransaksi.
     */
    data: XOR<DetailTransaksiCreateInput, DetailTransaksiUncheckedCreateInput>
  }

  /**
   * DetailTransaksi createMany
   */
  export type DetailTransaksiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DetailTransaksis.
     */
    data: DetailTransaksiCreateManyInput | DetailTransaksiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DetailTransaksi update
   */
  export type DetailTransaksiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * The data needed to update a DetailTransaksi.
     */
    data: XOR<DetailTransaksiUpdateInput, DetailTransaksiUncheckedUpdateInput>
    /**
     * Choose, which DetailTransaksi to update.
     */
    where: DetailTransaksiWhereUniqueInput
  }

  /**
   * DetailTransaksi updateMany
   */
  export type DetailTransaksiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DetailTransaksis.
     */
    data: XOR<DetailTransaksiUpdateManyMutationInput, DetailTransaksiUncheckedUpdateManyInput>
    /**
     * Filter which DetailTransaksis to update
     */
    where?: DetailTransaksiWhereInput
  }

  /**
   * DetailTransaksi upsert
   */
  export type DetailTransaksiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * The filter to search for the DetailTransaksi to update in case it exists.
     */
    where: DetailTransaksiWhereUniqueInput
    /**
     * In case the DetailTransaksi found by the `where` argument doesn't exist, create a new DetailTransaksi with this data.
     */
    create: XOR<DetailTransaksiCreateInput, DetailTransaksiUncheckedCreateInput>
    /**
     * In case the DetailTransaksi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DetailTransaksiUpdateInput, DetailTransaksiUncheckedUpdateInput>
  }

  /**
   * DetailTransaksi delete
   */
  export type DetailTransaksiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
    /**
     * Filter which DetailTransaksi to delete.
     */
    where: DetailTransaksiWhereUniqueInput
  }

  /**
   * DetailTransaksi deleteMany
   */
  export type DetailTransaksiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetailTransaksis to delete
     */
    where?: DetailTransaksiWhereInput
  }

  /**
   * DetailTransaksi without action
   */
  export type DetailTransaksiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailTransaksi
     */
    select?: DetailTransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetailTransaksiInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    kode_verifikasi: 'kode_verifikasi',
    verifikasi_exp: 'verifikasi_exp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const StanScalarFieldEnum: {
    id: 'id',
    nama_stan: 'nama_stan',
    nama_pemilik: 'nama_pemilik',
    telp: 'telp',
    id_user: 'id_user',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StanScalarFieldEnum = (typeof StanScalarFieldEnum)[keyof typeof StanScalarFieldEnum]


  export const SiswaScalarFieldEnum: {
    id: 'id',
    nama_siswa: 'nama_siswa',
    alamat: 'alamat',
    telp: 'telp',
    foto: 'foto',
    id_user: 'id_user',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiswaScalarFieldEnum = (typeof SiswaScalarFieldEnum)[keyof typeof SiswaScalarFieldEnum]


  export const MenuScalarFieldEnum: {
    id: 'id',
    nama_makanan: 'nama_makanan',
    jenis: 'jenis',
    harga: 'harga',
    foto: 'foto',
    deskripsi: 'deskripsi',
    id_stan: 'id_stan',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MenuScalarFieldEnum = (typeof MenuScalarFieldEnum)[keyof typeof MenuScalarFieldEnum]


  export const DiskonScalarFieldEnum: {
    id: 'id',
    id_stan: 'id_stan',
    nama_diskon: 'nama_diskon',
    persentase_diskon: 'persentase_diskon',
    tanggal_awal: 'tanggal_awal',
    tanggal_akhir: 'tanggal_akhir',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiskonScalarFieldEnum = (typeof DiskonScalarFieldEnum)[keyof typeof DiskonScalarFieldEnum]


  export const MenuDiskonScalarFieldEnum: {
    id: 'id',
    id_menu: 'id_menu',
    id_diskon: 'id_diskon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MenuDiskonScalarFieldEnum = (typeof MenuDiskonScalarFieldEnum)[keyof typeof MenuDiskonScalarFieldEnum]


  export const TransaksiScalarFieldEnum: {
    id: 'id',
    tanggal: 'tanggal',
    id_stan: 'id_stan',
    id_siswa: 'id_siswa',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransaksiScalarFieldEnum = (typeof TransaksiScalarFieldEnum)[keyof typeof TransaksiScalarFieldEnum]


  export const DetailTransaksiScalarFieldEnum: {
    id: 'id',
    id_transaksi: 'id_transaksi',
    id_menu: 'id_menu',
    qty: 'qty',
    harga_beli: 'harga_beli',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DetailTransaksiScalarFieldEnum = (typeof DetailTransaksiScalarFieldEnum)[keyof typeof DetailTransaksiScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'ROLE'
   */
  export type EnumROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ROLE'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'JENIS'
   */
  export type EnumJENISFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JENIS'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'STATUS'
   */
  export type EnumSTATUSFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'STATUS'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumROLEFilter<"Users"> | $Enums.ROLE
    kode_verifikasi?: StringNullableFilter<"Users"> | string | null
    verifikasi_exp?: DateTimeNullableFilter<"Users"> | Date | string | null
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    stan?: XOR<StanNullableRelationFilter, StanWhereInput> | null
    siswa?: XOR<SiswaNullableRelationFilter, SiswaWhereInput> | null
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    kode_verifikasi?: SortOrderInput | SortOrder
    verifikasi_exp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stan?: StanOrderByWithRelationInput
    siswa?: SiswaOrderByWithRelationInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    kode_verifikasi?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    role?: EnumROLEFilter<"Users"> | $Enums.ROLE
    verifikasi_exp?: DateTimeNullableFilter<"Users"> | Date | string | null
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    stan?: XOR<StanNullableRelationFilter, StanWhereInput> | null
    siswa?: XOR<SiswaNullableRelationFilter, SiswaWhereInput> | null
  }, "id" | "username" | "kode_verifikasi">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    kode_verifikasi?: SortOrderInput | SortOrder
    verifikasi_exp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    username?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    role?: EnumROLEWithAggregatesFilter<"Users"> | $Enums.ROLE
    kode_verifikasi?: StringNullableWithAggregatesFilter<"Users"> | string | null
    verifikasi_exp?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type StanWhereInput = {
    AND?: StanWhereInput | StanWhereInput[]
    OR?: StanWhereInput[]
    NOT?: StanWhereInput | StanWhereInput[]
    id?: IntFilter<"Stan"> | number
    nama_stan?: StringFilter<"Stan"> | string
    nama_pemilik?: StringFilter<"Stan"> | string
    telp?: StringFilter<"Stan"> | string
    id_user?: IntNullableFilter<"Stan"> | number | null
    createdAt?: DateTimeFilter<"Stan"> | Date | string
    updatedAt?: DateTimeFilter<"Stan"> | Date | string
    Menu?: MenuListRelationFilter
    Transaksi?: TransaksiListRelationFilter
    Diskon?: DiskonListRelationFilter
    users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type StanOrderByWithRelationInput = {
    id?: SortOrder
    nama_stan?: SortOrder
    nama_pemilik?: SortOrder
    telp?: SortOrder
    id_user?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Menu?: MenuOrderByRelationAggregateInput
    Transaksi?: TransaksiOrderByRelationAggregateInput
    Diskon?: DiskonOrderByRelationAggregateInput
    users?: UsersOrderByWithRelationInput
  }

  export type StanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_user?: number
    AND?: StanWhereInput | StanWhereInput[]
    OR?: StanWhereInput[]
    NOT?: StanWhereInput | StanWhereInput[]
    nama_stan?: StringFilter<"Stan"> | string
    nama_pemilik?: StringFilter<"Stan"> | string
    telp?: StringFilter<"Stan"> | string
    createdAt?: DateTimeFilter<"Stan"> | Date | string
    updatedAt?: DateTimeFilter<"Stan"> | Date | string
    Menu?: MenuListRelationFilter
    Transaksi?: TransaksiListRelationFilter
    Diskon?: DiskonListRelationFilter
    users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id" | "id_user">

  export type StanOrderByWithAggregationInput = {
    id?: SortOrder
    nama_stan?: SortOrder
    nama_pemilik?: SortOrder
    telp?: SortOrder
    id_user?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StanCountOrderByAggregateInput
    _avg?: StanAvgOrderByAggregateInput
    _max?: StanMaxOrderByAggregateInput
    _min?: StanMinOrderByAggregateInput
    _sum?: StanSumOrderByAggregateInput
  }

  export type StanScalarWhereWithAggregatesInput = {
    AND?: StanScalarWhereWithAggregatesInput | StanScalarWhereWithAggregatesInput[]
    OR?: StanScalarWhereWithAggregatesInput[]
    NOT?: StanScalarWhereWithAggregatesInput | StanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stan"> | number
    nama_stan?: StringWithAggregatesFilter<"Stan"> | string
    nama_pemilik?: StringWithAggregatesFilter<"Stan"> | string
    telp?: StringWithAggregatesFilter<"Stan"> | string
    id_user?: IntNullableWithAggregatesFilter<"Stan"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Stan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stan"> | Date | string
  }

  export type SiswaWhereInput = {
    AND?: SiswaWhereInput | SiswaWhereInput[]
    OR?: SiswaWhereInput[]
    NOT?: SiswaWhereInput | SiswaWhereInput[]
    id?: IntFilter<"Siswa"> | number
    nama_siswa?: StringFilter<"Siswa"> | string
    alamat?: StringFilter<"Siswa"> | string
    telp?: StringFilter<"Siswa"> | string
    foto?: StringFilter<"Siswa"> | string
    id_user?: IntNullableFilter<"Siswa"> | number | null
    createdAt?: DateTimeFilter<"Siswa"> | Date | string
    updatedAt?: DateTimeFilter<"Siswa"> | Date | string
    Transaksi?: TransaksiListRelationFilter
    users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type SiswaOrderByWithRelationInput = {
    id?: SortOrder
    nama_siswa?: SortOrder
    alamat?: SortOrder
    telp?: SortOrder
    foto?: SortOrder
    id_user?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Transaksi?: TransaksiOrderByRelationAggregateInput
    users?: UsersOrderByWithRelationInput
  }

  export type SiswaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_user?: number
    AND?: SiswaWhereInput | SiswaWhereInput[]
    OR?: SiswaWhereInput[]
    NOT?: SiswaWhereInput | SiswaWhereInput[]
    nama_siswa?: StringFilter<"Siswa"> | string
    alamat?: StringFilter<"Siswa"> | string
    telp?: StringFilter<"Siswa"> | string
    foto?: StringFilter<"Siswa"> | string
    createdAt?: DateTimeFilter<"Siswa"> | Date | string
    updatedAt?: DateTimeFilter<"Siswa"> | Date | string
    Transaksi?: TransaksiListRelationFilter
    users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id" | "id_user">

  export type SiswaOrderByWithAggregationInput = {
    id?: SortOrder
    nama_siswa?: SortOrder
    alamat?: SortOrder
    telp?: SortOrder
    foto?: SortOrder
    id_user?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiswaCountOrderByAggregateInput
    _avg?: SiswaAvgOrderByAggregateInput
    _max?: SiswaMaxOrderByAggregateInput
    _min?: SiswaMinOrderByAggregateInput
    _sum?: SiswaSumOrderByAggregateInput
  }

  export type SiswaScalarWhereWithAggregatesInput = {
    AND?: SiswaScalarWhereWithAggregatesInput | SiswaScalarWhereWithAggregatesInput[]
    OR?: SiswaScalarWhereWithAggregatesInput[]
    NOT?: SiswaScalarWhereWithAggregatesInput | SiswaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Siswa"> | number
    nama_siswa?: StringWithAggregatesFilter<"Siswa"> | string
    alamat?: StringWithAggregatesFilter<"Siswa"> | string
    telp?: StringWithAggregatesFilter<"Siswa"> | string
    foto?: StringWithAggregatesFilter<"Siswa"> | string
    id_user?: IntNullableWithAggregatesFilter<"Siswa"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Siswa"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Siswa"> | Date | string
  }

  export type MenuWhereInput = {
    AND?: MenuWhereInput | MenuWhereInput[]
    OR?: MenuWhereInput[]
    NOT?: MenuWhereInput | MenuWhereInput[]
    id?: IntFilter<"Menu"> | number
    nama_makanan?: StringFilter<"Menu"> | string
    jenis?: EnumJENISFilter<"Menu"> | $Enums.JENIS
    harga?: FloatFilter<"Menu"> | number
    foto?: StringFilter<"Menu"> | string
    deskripsi?: StringFilter<"Menu"> | string
    id_stan?: IntFilter<"Menu"> | number
    createdAt?: DateTimeFilter<"Menu"> | Date | string
    updatedAt?: DateTimeFilter<"Menu"> | Date | string
    stan_detail?: XOR<StanRelationFilter, StanWhereInput>
    MenuDiskon?: MenuDiskonListRelationFilter
    DetailTransaksi?: DetailTransaksiListRelationFilter
  }

  export type MenuOrderByWithRelationInput = {
    id?: SortOrder
    nama_makanan?: SortOrder
    jenis?: SortOrder
    harga?: SortOrder
    foto?: SortOrder
    deskripsi?: SortOrder
    id_stan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stan_detail?: StanOrderByWithRelationInput
    MenuDiskon?: MenuDiskonOrderByRelationAggregateInput
    DetailTransaksi?: DetailTransaksiOrderByRelationAggregateInput
  }

  export type MenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MenuWhereInput | MenuWhereInput[]
    OR?: MenuWhereInput[]
    NOT?: MenuWhereInput | MenuWhereInput[]
    nama_makanan?: StringFilter<"Menu"> | string
    jenis?: EnumJENISFilter<"Menu"> | $Enums.JENIS
    harga?: FloatFilter<"Menu"> | number
    foto?: StringFilter<"Menu"> | string
    deskripsi?: StringFilter<"Menu"> | string
    id_stan?: IntFilter<"Menu"> | number
    createdAt?: DateTimeFilter<"Menu"> | Date | string
    updatedAt?: DateTimeFilter<"Menu"> | Date | string
    stan_detail?: XOR<StanRelationFilter, StanWhereInput>
    MenuDiskon?: MenuDiskonListRelationFilter
    DetailTransaksi?: DetailTransaksiListRelationFilter
  }, "id">

  export type MenuOrderByWithAggregationInput = {
    id?: SortOrder
    nama_makanan?: SortOrder
    jenis?: SortOrder
    harga?: SortOrder
    foto?: SortOrder
    deskripsi?: SortOrder
    id_stan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MenuCountOrderByAggregateInput
    _avg?: MenuAvgOrderByAggregateInput
    _max?: MenuMaxOrderByAggregateInput
    _min?: MenuMinOrderByAggregateInput
    _sum?: MenuSumOrderByAggregateInput
  }

  export type MenuScalarWhereWithAggregatesInput = {
    AND?: MenuScalarWhereWithAggregatesInput | MenuScalarWhereWithAggregatesInput[]
    OR?: MenuScalarWhereWithAggregatesInput[]
    NOT?: MenuScalarWhereWithAggregatesInput | MenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Menu"> | number
    nama_makanan?: StringWithAggregatesFilter<"Menu"> | string
    jenis?: EnumJENISWithAggregatesFilter<"Menu"> | $Enums.JENIS
    harga?: FloatWithAggregatesFilter<"Menu"> | number
    foto?: StringWithAggregatesFilter<"Menu"> | string
    deskripsi?: StringWithAggregatesFilter<"Menu"> | string
    id_stan?: IntWithAggregatesFilter<"Menu"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Menu"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Menu"> | Date | string
  }

  export type DiskonWhereInput = {
    AND?: DiskonWhereInput | DiskonWhereInput[]
    OR?: DiskonWhereInput[]
    NOT?: DiskonWhereInput | DiskonWhereInput[]
    id?: IntFilter<"Diskon"> | number
    id_stan?: IntFilter<"Diskon"> | number
    nama_diskon?: StringFilter<"Diskon"> | string
    persentase_diskon?: FloatFilter<"Diskon"> | number
    tanggal_awal?: DateTimeFilter<"Diskon"> | Date | string
    tanggal_akhir?: DateTimeFilter<"Diskon"> | Date | string
    createdAt?: DateTimeFilter<"Diskon"> | Date | string
    updatedAt?: DateTimeFilter<"Diskon"> | Date | string
    stan_detail?: XOR<StanRelationFilter, StanWhereInput>
    MenuDiskon?: MenuDiskonListRelationFilter
  }

  export type DiskonOrderByWithRelationInput = {
    id?: SortOrder
    id_stan?: SortOrder
    nama_diskon?: SortOrder
    persentase_diskon?: SortOrder
    tanggal_awal?: SortOrder
    tanggal_akhir?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stan_detail?: StanOrderByWithRelationInput
    MenuDiskon?: MenuDiskonOrderByRelationAggregateInput
  }

  export type DiskonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiskonWhereInput | DiskonWhereInput[]
    OR?: DiskonWhereInput[]
    NOT?: DiskonWhereInput | DiskonWhereInput[]
    id_stan?: IntFilter<"Diskon"> | number
    nama_diskon?: StringFilter<"Diskon"> | string
    persentase_diskon?: FloatFilter<"Diskon"> | number
    tanggal_awal?: DateTimeFilter<"Diskon"> | Date | string
    tanggal_akhir?: DateTimeFilter<"Diskon"> | Date | string
    createdAt?: DateTimeFilter<"Diskon"> | Date | string
    updatedAt?: DateTimeFilter<"Diskon"> | Date | string
    stan_detail?: XOR<StanRelationFilter, StanWhereInput>
    MenuDiskon?: MenuDiskonListRelationFilter
  }, "id">

  export type DiskonOrderByWithAggregationInput = {
    id?: SortOrder
    id_stan?: SortOrder
    nama_diskon?: SortOrder
    persentase_diskon?: SortOrder
    tanggal_awal?: SortOrder
    tanggal_akhir?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiskonCountOrderByAggregateInput
    _avg?: DiskonAvgOrderByAggregateInput
    _max?: DiskonMaxOrderByAggregateInput
    _min?: DiskonMinOrderByAggregateInput
    _sum?: DiskonSumOrderByAggregateInput
  }

  export type DiskonScalarWhereWithAggregatesInput = {
    AND?: DiskonScalarWhereWithAggregatesInput | DiskonScalarWhereWithAggregatesInput[]
    OR?: DiskonScalarWhereWithAggregatesInput[]
    NOT?: DiskonScalarWhereWithAggregatesInput | DiskonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Diskon"> | number
    id_stan?: IntWithAggregatesFilter<"Diskon"> | number
    nama_diskon?: StringWithAggregatesFilter<"Diskon"> | string
    persentase_diskon?: FloatWithAggregatesFilter<"Diskon"> | number
    tanggal_awal?: DateTimeWithAggregatesFilter<"Diskon"> | Date | string
    tanggal_akhir?: DateTimeWithAggregatesFilter<"Diskon"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Diskon"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Diskon"> | Date | string
  }

  export type MenuDiskonWhereInput = {
    AND?: MenuDiskonWhereInput | MenuDiskonWhereInput[]
    OR?: MenuDiskonWhereInput[]
    NOT?: MenuDiskonWhereInput | MenuDiskonWhereInput[]
    id?: IntFilter<"MenuDiskon"> | number
    id_menu?: IntFilter<"MenuDiskon"> | number
    id_diskon?: IntFilter<"MenuDiskon"> | number
    createdAt?: DateTimeFilter<"MenuDiskon"> | Date | string
    updatedAt?: DateTimeFilter<"MenuDiskon"> | Date | string
    menu_detail?: XOR<MenuRelationFilter, MenuWhereInput>
    diskon_detail?: XOR<DiskonRelationFilter, DiskonWhereInput>
  }

  export type MenuDiskonOrderByWithRelationInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    menu_detail?: MenuOrderByWithRelationInput
    diskon_detail?: DiskonOrderByWithRelationInput
  }

  export type MenuDiskonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MenuDiskonWhereInput | MenuDiskonWhereInput[]
    OR?: MenuDiskonWhereInput[]
    NOT?: MenuDiskonWhereInput | MenuDiskonWhereInput[]
    id_menu?: IntFilter<"MenuDiskon"> | number
    id_diskon?: IntFilter<"MenuDiskon"> | number
    createdAt?: DateTimeFilter<"MenuDiskon"> | Date | string
    updatedAt?: DateTimeFilter<"MenuDiskon"> | Date | string
    menu_detail?: XOR<MenuRelationFilter, MenuWhereInput>
    diskon_detail?: XOR<DiskonRelationFilter, DiskonWhereInput>
  }, "id">

  export type MenuDiskonOrderByWithAggregationInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MenuDiskonCountOrderByAggregateInput
    _avg?: MenuDiskonAvgOrderByAggregateInput
    _max?: MenuDiskonMaxOrderByAggregateInput
    _min?: MenuDiskonMinOrderByAggregateInput
    _sum?: MenuDiskonSumOrderByAggregateInput
  }

  export type MenuDiskonScalarWhereWithAggregatesInput = {
    AND?: MenuDiskonScalarWhereWithAggregatesInput | MenuDiskonScalarWhereWithAggregatesInput[]
    OR?: MenuDiskonScalarWhereWithAggregatesInput[]
    NOT?: MenuDiskonScalarWhereWithAggregatesInput | MenuDiskonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MenuDiskon"> | number
    id_menu?: IntWithAggregatesFilter<"MenuDiskon"> | number
    id_diskon?: IntWithAggregatesFilter<"MenuDiskon"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MenuDiskon"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MenuDiskon"> | Date | string
  }

  export type TransaksiWhereInput = {
    AND?: TransaksiWhereInput | TransaksiWhereInput[]
    OR?: TransaksiWhereInput[]
    NOT?: TransaksiWhereInput | TransaksiWhereInput[]
    id?: IntFilter<"Transaksi"> | number
    tanggal?: DateTimeFilter<"Transaksi"> | Date | string
    id_stan?: IntFilter<"Transaksi"> | number
    id_siswa?: IntFilter<"Transaksi"> | number
    status?: EnumSTATUSFilter<"Transaksi"> | $Enums.STATUS
    createdAt?: DateTimeFilter<"Transaksi"> | Date | string
    updatedAt?: DateTimeFilter<"Transaksi"> | Date | string
    stan_detail?: XOR<StanRelationFilter, StanWhereInput>
    siswa_detail?: XOR<SiswaRelationFilter, SiswaWhereInput>
    DetailTransaksi?: DetailTransaksiListRelationFilter
  }

  export type TransaksiOrderByWithRelationInput = {
    id?: SortOrder
    tanggal?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stan_detail?: StanOrderByWithRelationInput
    siswa_detail?: SiswaOrderByWithRelationInput
    DetailTransaksi?: DetailTransaksiOrderByRelationAggregateInput
  }

  export type TransaksiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransaksiWhereInput | TransaksiWhereInput[]
    OR?: TransaksiWhereInput[]
    NOT?: TransaksiWhereInput | TransaksiWhereInput[]
    tanggal?: DateTimeFilter<"Transaksi"> | Date | string
    id_stan?: IntFilter<"Transaksi"> | number
    id_siswa?: IntFilter<"Transaksi"> | number
    status?: EnumSTATUSFilter<"Transaksi"> | $Enums.STATUS
    createdAt?: DateTimeFilter<"Transaksi"> | Date | string
    updatedAt?: DateTimeFilter<"Transaksi"> | Date | string
    stan_detail?: XOR<StanRelationFilter, StanWhereInput>
    siswa_detail?: XOR<SiswaRelationFilter, SiswaWhereInput>
    DetailTransaksi?: DetailTransaksiListRelationFilter
  }, "id">

  export type TransaksiOrderByWithAggregationInput = {
    id?: SortOrder
    tanggal?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransaksiCountOrderByAggregateInput
    _avg?: TransaksiAvgOrderByAggregateInput
    _max?: TransaksiMaxOrderByAggregateInput
    _min?: TransaksiMinOrderByAggregateInput
    _sum?: TransaksiSumOrderByAggregateInput
  }

  export type TransaksiScalarWhereWithAggregatesInput = {
    AND?: TransaksiScalarWhereWithAggregatesInput | TransaksiScalarWhereWithAggregatesInput[]
    OR?: TransaksiScalarWhereWithAggregatesInput[]
    NOT?: TransaksiScalarWhereWithAggregatesInput | TransaksiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaksi"> | number
    tanggal?: DateTimeWithAggregatesFilter<"Transaksi"> | Date | string
    id_stan?: IntWithAggregatesFilter<"Transaksi"> | number
    id_siswa?: IntWithAggregatesFilter<"Transaksi"> | number
    status?: EnumSTATUSWithAggregatesFilter<"Transaksi"> | $Enums.STATUS
    createdAt?: DateTimeWithAggregatesFilter<"Transaksi"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaksi"> | Date | string
  }

  export type DetailTransaksiWhereInput = {
    AND?: DetailTransaksiWhereInput | DetailTransaksiWhereInput[]
    OR?: DetailTransaksiWhereInput[]
    NOT?: DetailTransaksiWhereInput | DetailTransaksiWhereInput[]
    id?: IntFilter<"DetailTransaksi"> | number
    id_transaksi?: IntFilter<"DetailTransaksi"> | number
    id_menu?: IntFilter<"DetailTransaksi"> | number
    qty?: IntFilter<"DetailTransaksi"> | number
    harga_beli?: FloatFilter<"DetailTransaksi"> | number
    createdAt?: DateTimeFilter<"DetailTransaksi"> | Date | string
    updatedAt?: DateTimeFilter<"DetailTransaksi"> | Date | string
    transaksi_detail?: XOR<TransaksiRelationFilter, TransaksiWhereInput>
    menu_detail?: XOR<MenuRelationFilter, MenuWhereInput>
  }

  export type DetailTransaksiOrderByWithRelationInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transaksi_detail?: TransaksiOrderByWithRelationInput
    menu_detail?: MenuOrderByWithRelationInput
  }

  export type DetailTransaksiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DetailTransaksiWhereInput | DetailTransaksiWhereInput[]
    OR?: DetailTransaksiWhereInput[]
    NOT?: DetailTransaksiWhereInput | DetailTransaksiWhereInput[]
    id_transaksi?: IntFilter<"DetailTransaksi"> | number
    id_menu?: IntFilter<"DetailTransaksi"> | number
    qty?: IntFilter<"DetailTransaksi"> | number
    harga_beli?: FloatFilter<"DetailTransaksi"> | number
    createdAt?: DateTimeFilter<"DetailTransaksi"> | Date | string
    updatedAt?: DateTimeFilter<"DetailTransaksi"> | Date | string
    transaksi_detail?: XOR<TransaksiRelationFilter, TransaksiWhereInput>
    menu_detail?: XOR<MenuRelationFilter, MenuWhereInput>
  }, "id">

  export type DetailTransaksiOrderByWithAggregationInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DetailTransaksiCountOrderByAggregateInput
    _avg?: DetailTransaksiAvgOrderByAggregateInput
    _max?: DetailTransaksiMaxOrderByAggregateInput
    _min?: DetailTransaksiMinOrderByAggregateInput
    _sum?: DetailTransaksiSumOrderByAggregateInput
  }

  export type DetailTransaksiScalarWhereWithAggregatesInput = {
    AND?: DetailTransaksiScalarWhereWithAggregatesInput | DetailTransaksiScalarWhereWithAggregatesInput[]
    OR?: DetailTransaksiScalarWhereWithAggregatesInput[]
    NOT?: DetailTransaksiScalarWhereWithAggregatesInput | DetailTransaksiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DetailTransaksi"> | number
    id_transaksi?: IntWithAggregatesFilter<"DetailTransaksi"> | number
    id_menu?: IntWithAggregatesFilter<"DetailTransaksi"> | number
    qty?: IntWithAggregatesFilter<"DetailTransaksi"> | number
    harga_beli?: FloatWithAggregatesFilter<"DetailTransaksi"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DetailTransaksi"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DetailTransaksi"> | Date | string
  }

  export type UsersCreateInput = {
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stan?: StanCreateNestedOneWithoutUsersInput
    siswa?: SiswaCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stan?: StanUncheckedCreateNestedOneWithoutUsersInput
    siswa?: SiswaUncheckedCreateNestedOneWithoutUsersInput
  }

  export type UsersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan?: StanUpdateOneWithoutUsersNestedInput
    siswa?: SiswaUpdateOneWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan?: StanUncheckedUpdateOneWithoutUsersNestedInput
    siswa?: SiswaUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StanCreateInput = {
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuCreateNestedManyWithoutStan_detailInput
    Transaksi?: TransaksiCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonCreateNestedManyWithoutStan_detailInput
    users?: UsersCreateNestedOneWithoutStanInput
  }

  export type StanUncheckedCreateInput = {
    id?: number
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuUncheckedCreateNestedManyWithoutStan_detailInput
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonUncheckedCreateNestedManyWithoutStan_detailInput
  }

  export type StanUpdateInput = {
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUpdateManyWithoutStan_detailNestedInput
    Transaksi?: TransaksiUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUpdateManyWithoutStan_detailNestedInput
    users?: UsersUpdateOneWithoutStanNestedInput
  }

  export type StanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUncheckedUpdateManyWithoutStan_detailNestedInput
    Transaksi?: TransaksiUncheckedUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUncheckedUpdateManyWithoutStan_detailNestedInput
  }

  export type StanCreateManyInput = {
    id?: number
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StanUpdateManyMutationInput = {
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiswaCreateInput = {
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Transaksi?: TransaksiCreateNestedManyWithoutSiswa_detailInput
    users?: UsersCreateNestedOneWithoutSiswaInput
  }

  export type SiswaUncheckedCreateInput = {
    id?: number
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutSiswa_detailInput
  }

  export type SiswaUpdateInput = {
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transaksi?: TransaksiUpdateManyWithoutSiswa_detailNestedInput
    users?: UsersUpdateOneWithoutSiswaNestedInput
  }

  export type SiswaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transaksi?: TransaksiUncheckedUpdateManyWithoutSiswa_detailNestedInput
  }

  export type SiswaCreateManyInput = {
    id?: number
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiswaUpdateManyMutationInput = {
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiswaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuCreateInput = {
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutMenuInput
    MenuDiskon?: MenuDiskonCreateNestedManyWithoutMenu_detailInput
    DetailTransaksi?: DetailTransaksiCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuUncheckedCreateInput = {
    id?: number
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    id_stan?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonUncheckedCreateNestedManyWithoutMenu_detailInput
    DetailTransaksi?: DetailTransaksiUncheckedCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuUpdateInput = {
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutMenuNestedInput
    MenuDiskon?: MenuDiskonUpdateManyWithoutMenu_detailNestedInput
    DetailTransaksi?: DetailTransaksiUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    id_stan?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUncheckedUpdateManyWithoutMenu_detailNestedInput
    DetailTransaksi?: DetailTransaksiUncheckedUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuCreateManyInput = {
    id?: number
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    id_stan?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuUpdateManyMutationInput = {
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    id_stan?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiskonCreateInput = {
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutDiskonInput
    MenuDiskon?: MenuDiskonCreateNestedManyWithoutDiskon_detailInput
  }

  export type DiskonUncheckedCreateInput = {
    id?: number
    id_stan?: number
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonUncheckedCreateNestedManyWithoutDiskon_detailInput
  }

  export type DiskonUpdateInput = {
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutDiskonNestedInput
    MenuDiskon?: MenuDiskonUpdateManyWithoutDiskon_detailNestedInput
  }

  export type DiskonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_stan?: IntFieldUpdateOperationsInput | number
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUncheckedUpdateManyWithoutDiskon_detailNestedInput
  }

  export type DiskonCreateManyInput = {
    id?: number
    id_stan?: number
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiskonUpdateManyMutationInput = {
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiskonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_stan?: IntFieldUpdateOperationsInput | number
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    menu_detail?: MenuCreateNestedOneWithoutMenuDiskonInput
    diskon_detail?: DiskonCreateNestedOneWithoutMenuDiskonInput
  }

  export type MenuDiskonUncheckedCreateInput = {
    id?: number
    id_menu?: number
    id_diskon?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuDiskonUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu_detail?: MenuUpdateOneRequiredWithoutMenuDiskonNestedInput
    diskon_detail?: DiskonUpdateOneRequiredWithoutMenuDiskonNestedInput
  }

  export type MenuDiskonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    id_diskon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonCreateManyInput = {
    id?: number
    id_menu?: number
    id_diskon?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuDiskonUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    id_diskon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaksiCreateInput = {
    tanggal?: Date | string
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutTransaksiInput
    siswa_detail?: SiswaCreateNestedOneWithoutTransaksiInput
    DetailTransaksi?: DetailTransaksiCreateNestedManyWithoutTransaksi_detailInput
  }

  export type TransaksiUncheckedCreateInput = {
    id?: number
    tanggal?: Date | string
    id_stan?: number
    id_siswa?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    DetailTransaksi?: DetailTransaksiUncheckedCreateNestedManyWithoutTransaksi_detailInput
  }

  export type TransaksiUpdateInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutTransaksiNestedInput
    siswa_detail?: SiswaUpdateOneRequiredWithoutTransaksiNestedInput
    DetailTransaksi?: DetailTransaksiUpdateManyWithoutTransaksi_detailNestedInput
  }

  export type TransaksiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_stan?: IntFieldUpdateOperationsInput | number
    id_siswa?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DetailTransaksi?: DetailTransaksiUncheckedUpdateManyWithoutTransaksi_detailNestedInput
  }

  export type TransaksiCreateManyInput = {
    id?: number
    tanggal?: Date | string
    id_stan?: number
    id_siswa?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransaksiUpdateManyMutationInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaksiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_stan?: IntFieldUpdateOperationsInput | number
    id_siswa?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiCreateInput = {
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transaksi_detail?: TransaksiCreateNestedOneWithoutDetailTransaksiInput
    menu_detail?: MenuCreateNestedOneWithoutDetailTransaksiInput
  }

  export type DetailTransaksiUncheckedCreateInput = {
    id?: number
    id_transaksi?: number
    id_menu?: number
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetailTransaksiUpdateInput = {
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaksi_detail?: TransaksiUpdateOneRequiredWithoutDetailTransaksiNestedInput
    menu_detail?: MenuUpdateOneRequiredWithoutDetailTransaksiNestedInput
  }

  export type DetailTransaksiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_transaksi?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiCreateManyInput = {
    id?: number
    id_transaksi?: number
    id_menu?: number
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetailTransaksiUpdateManyMutationInput = {
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_transaksi?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumROLEFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[]
    notIn?: $Enums.ROLE[]
    not?: NestedEnumROLEFilter<$PrismaModel> | $Enums.ROLE
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StanNullableRelationFilter = {
    is?: StanWhereInput | null
    isNot?: StanWhereInput | null
  }

  export type SiswaNullableRelationFilter = {
    is?: SiswaWhereInput | null
    isNot?: SiswaWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    kode_verifikasi?: SortOrder
    verifikasi_exp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    kode_verifikasi?: SortOrder
    verifikasi_exp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    kode_verifikasi?: SortOrder
    verifikasi_exp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumROLEWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[]
    notIn?: $Enums.ROLE[]
    not?: NestedEnumROLEWithAggregatesFilter<$PrismaModel> | $Enums.ROLE
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLEFilter<$PrismaModel>
    _max?: NestedEnumROLEFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MenuListRelationFilter = {
    every?: MenuWhereInput
    some?: MenuWhereInput
    none?: MenuWhereInput
  }

  export type TransaksiListRelationFilter = {
    every?: TransaksiWhereInput
    some?: TransaksiWhereInput
    none?: TransaksiWhereInput
  }

  export type DiskonListRelationFilter = {
    every?: DiskonWhereInput
    some?: DiskonWhereInput
    none?: DiskonWhereInput
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type MenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransaksiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiskonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StanCountOrderByAggregateInput = {
    id?: SortOrder
    nama_stan?: SortOrder
    nama_pemilik?: SortOrder
    telp?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StanAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type StanMaxOrderByAggregateInput = {
    id?: SortOrder
    nama_stan?: SortOrder
    nama_pemilik?: SortOrder
    telp?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StanMinOrderByAggregateInput = {
    id?: SortOrder
    nama_stan?: SortOrder
    nama_pemilik?: SortOrder
    telp?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StanSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SiswaCountOrderByAggregateInput = {
    id?: SortOrder
    nama_siswa?: SortOrder
    alamat?: SortOrder
    telp?: SortOrder
    foto?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiswaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type SiswaMaxOrderByAggregateInput = {
    id?: SortOrder
    nama_siswa?: SortOrder
    alamat?: SortOrder
    telp?: SortOrder
    foto?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiswaMinOrderByAggregateInput = {
    id?: SortOrder
    nama_siswa?: SortOrder
    alamat?: SortOrder
    telp?: SortOrder
    foto?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiswaSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type EnumJENISFilter<$PrismaModel = never> = {
    equals?: $Enums.JENIS | EnumJENISFieldRefInput<$PrismaModel>
    in?: $Enums.JENIS[]
    notIn?: $Enums.JENIS[]
    not?: NestedEnumJENISFilter<$PrismaModel> | $Enums.JENIS
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StanRelationFilter = {
    is?: StanWhereInput
    isNot?: StanWhereInput
  }

  export type MenuDiskonListRelationFilter = {
    every?: MenuDiskonWhereInput
    some?: MenuDiskonWhereInput
    none?: MenuDiskonWhereInput
  }

  export type DetailTransaksiListRelationFilter = {
    every?: DetailTransaksiWhereInput
    some?: DetailTransaksiWhereInput
    none?: DetailTransaksiWhereInput
  }

  export type MenuDiskonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DetailTransaksiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MenuCountOrderByAggregateInput = {
    id?: SortOrder
    nama_makanan?: SortOrder
    jenis?: SortOrder
    harga?: SortOrder
    foto?: SortOrder
    deskripsi?: SortOrder
    id_stan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuAvgOrderByAggregateInput = {
    id?: SortOrder
    harga?: SortOrder
    id_stan?: SortOrder
  }

  export type MenuMaxOrderByAggregateInput = {
    id?: SortOrder
    nama_makanan?: SortOrder
    jenis?: SortOrder
    harga?: SortOrder
    foto?: SortOrder
    deskripsi?: SortOrder
    id_stan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuMinOrderByAggregateInput = {
    id?: SortOrder
    nama_makanan?: SortOrder
    jenis?: SortOrder
    harga?: SortOrder
    foto?: SortOrder
    deskripsi?: SortOrder
    id_stan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuSumOrderByAggregateInput = {
    id?: SortOrder
    harga?: SortOrder
    id_stan?: SortOrder
  }

  export type EnumJENISWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JENIS | EnumJENISFieldRefInput<$PrismaModel>
    in?: $Enums.JENIS[]
    notIn?: $Enums.JENIS[]
    not?: NestedEnumJENISWithAggregatesFilter<$PrismaModel> | $Enums.JENIS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJENISFilter<$PrismaModel>
    _max?: NestedEnumJENISFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DiskonCountOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    nama_diskon?: SortOrder
    persentase_diskon?: SortOrder
    tanggal_awal?: SortOrder
    tanggal_akhir?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiskonAvgOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    persentase_diskon?: SortOrder
  }

  export type DiskonMaxOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    nama_diskon?: SortOrder
    persentase_diskon?: SortOrder
    tanggal_awal?: SortOrder
    tanggal_akhir?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiskonMinOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    nama_diskon?: SortOrder
    persentase_diskon?: SortOrder
    tanggal_awal?: SortOrder
    tanggal_akhir?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiskonSumOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    persentase_diskon?: SortOrder
  }

  export type MenuRelationFilter = {
    is?: MenuWhereInput
    isNot?: MenuWhereInput
  }

  export type DiskonRelationFilter = {
    is?: DiskonWhereInput
    isNot?: DiskonWhereInput
  }

  export type MenuDiskonCountOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuDiskonAvgOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
  }

  export type MenuDiskonMaxOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuDiskonMinOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuDiskonSumOrderByAggregateInput = {
    id?: SortOrder
    id_menu?: SortOrder
    id_diskon?: SortOrder
  }

  export type EnumSTATUSFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSFilter<$PrismaModel> | $Enums.STATUS
  }

  export type SiswaRelationFilter = {
    is?: SiswaWhereInput
    isNot?: SiswaWhereInput
  }

  export type TransaksiCountOrderByAggregateInput = {
    id?: SortOrder
    tanggal?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransaksiAvgOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
  }

  export type TransaksiMaxOrderByAggregateInput = {
    id?: SortOrder
    tanggal?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransaksiMinOrderByAggregateInput = {
    id?: SortOrder
    tanggal?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransaksiSumOrderByAggregateInput = {
    id?: SortOrder
    id_stan?: SortOrder
    id_siswa?: SortOrder
  }

  export type EnumSTATUSWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSWithAggregatesFilter<$PrismaModel> | $Enums.STATUS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSTATUSFilter<$PrismaModel>
    _max?: NestedEnumSTATUSFilter<$PrismaModel>
  }

  export type TransaksiRelationFilter = {
    is?: TransaksiWhereInput
    isNot?: TransaksiWhereInput
  }

  export type DetailTransaksiCountOrderByAggregateInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DetailTransaksiAvgOrderByAggregateInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
  }

  export type DetailTransaksiMaxOrderByAggregateInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DetailTransaksiMinOrderByAggregateInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DetailTransaksiSumOrderByAggregateInput = {
    id?: SortOrder
    id_transaksi?: SortOrder
    id_menu?: SortOrder
    qty?: SortOrder
    harga_beli?: SortOrder
  }

  export type StanCreateNestedOneWithoutUsersInput = {
    create?: XOR<StanCreateWithoutUsersInput, StanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StanCreateOrConnectWithoutUsersInput
    connect?: StanWhereUniqueInput
  }

  export type SiswaCreateNestedOneWithoutUsersInput = {
    create?: XOR<SiswaCreateWithoutUsersInput, SiswaUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SiswaCreateOrConnectWithoutUsersInput
    connect?: SiswaWhereUniqueInput
  }

  export type StanUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<StanCreateWithoutUsersInput, StanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StanCreateOrConnectWithoutUsersInput
    connect?: StanWhereUniqueInput
  }

  export type SiswaUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<SiswaCreateWithoutUsersInput, SiswaUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SiswaCreateOrConnectWithoutUsersInput
    connect?: SiswaWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumROLEFieldUpdateOperationsInput = {
    set?: $Enums.ROLE
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StanUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StanCreateWithoutUsersInput, StanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StanCreateOrConnectWithoutUsersInput
    upsert?: StanUpsertWithoutUsersInput
    disconnect?: StanWhereInput | boolean
    delete?: StanWhereInput | boolean
    connect?: StanWhereUniqueInput
    update?: XOR<XOR<StanUpdateToOneWithWhereWithoutUsersInput, StanUpdateWithoutUsersInput>, StanUncheckedUpdateWithoutUsersInput>
  }

  export type SiswaUpdateOneWithoutUsersNestedInput = {
    create?: XOR<SiswaCreateWithoutUsersInput, SiswaUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SiswaCreateOrConnectWithoutUsersInput
    upsert?: SiswaUpsertWithoutUsersInput
    disconnect?: SiswaWhereInput | boolean
    delete?: SiswaWhereInput | boolean
    connect?: SiswaWhereUniqueInput
    update?: XOR<XOR<SiswaUpdateToOneWithWhereWithoutUsersInput, SiswaUpdateWithoutUsersInput>, SiswaUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StanUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StanCreateWithoutUsersInput, StanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StanCreateOrConnectWithoutUsersInput
    upsert?: StanUpsertWithoutUsersInput
    disconnect?: StanWhereInput | boolean
    delete?: StanWhereInput | boolean
    connect?: StanWhereUniqueInput
    update?: XOR<XOR<StanUpdateToOneWithWhereWithoutUsersInput, StanUpdateWithoutUsersInput>, StanUncheckedUpdateWithoutUsersInput>
  }

  export type SiswaUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<SiswaCreateWithoutUsersInput, SiswaUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SiswaCreateOrConnectWithoutUsersInput
    upsert?: SiswaUpsertWithoutUsersInput
    disconnect?: SiswaWhereInput | boolean
    delete?: SiswaWhereInput | boolean
    connect?: SiswaWhereUniqueInput
    update?: XOR<XOR<SiswaUpdateToOneWithWhereWithoutUsersInput, SiswaUpdateWithoutUsersInput>, SiswaUncheckedUpdateWithoutUsersInput>
  }

  export type MenuCreateNestedManyWithoutStan_detailInput = {
    create?: XOR<MenuCreateWithoutStan_detailInput, MenuUncheckedCreateWithoutStan_detailInput> | MenuCreateWithoutStan_detailInput[] | MenuUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutStan_detailInput | MenuCreateOrConnectWithoutStan_detailInput[]
    createMany?: MenuCreateManyStan_detailInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type TransaksiCreateNestedManyWithoutStan_detailInput = {
    create?: XOR<TransaksiCreateWithoutStan_detailInput, TransaksiUncheckedCreateWithoutStan_detailInput> | TransaksiCreateWithoutStan_detailInput[] | TransaksiUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutStan_detailInput | TransaksiCreateOrConnectWithoutStan_detailInput[]
    createMany?: TransaksiCreateManyStan_detailInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type DiskonCreateNestedManyWithoutStan_detailInput = {
    create?: XOR<DiskonCreateWithoutStan_detailInput, DiskonUncheckedCreateWithoutStan_detailInput> | DiskonCreateWithoutStan_detailInput[] | DiskonUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: DiskonCreateOrConnectWithoutStan_detailInput | DiskonCreateOrConnectWithoutStan_detailInput[]
    createMany?: DiskonCreateManyStan_detailInputEnvelope
    connect?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
  }

  export type UsersCreateNestedOneWithoutStanInput = {
    create?: XOR<UsersCreateWithoutStanInput, UsersUncheckedCreateWithoutStanInput>
    connectOrCreate?: UsersCreateOrConnectWithoutStanInput
    connect?: UsersWhereUniqueInput
  }

  export type MenuUncheckedCreateNestedManyWithoutStan_detailInput = {
    create?: XOR<MenuCreateWithoutStan_detailInput, MenuUncheckedCreateWithoutStan_detailInput> | MenuCreateWithoutStan_detailInput[] | MenuUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutStan_detailInput | MenuCreateOrConnectWithoutStan_detailInput[]
    createMany?: MenuCreateManyStan_detailInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type TransaksiUncheckedCreateNestedManyWithoutStan_detailInput = {
    create?: XOR<TransaksiCreateWithoutStan_detailInput, TransaksiUncheckedCreateWithoutStan_detailInput> | TransaksiCreateWithoutStan_detailInput[] | TransaksiUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutStan_detailInput | TransaksiCreateOrConnectWithoutStan_detailInput[]
    createMany?: TransaksiCreateManyStan_detailInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type DiskonUncheckedCreateNestedManyWithoutStan_detailInput = {
    create?: XOR<DiskonCreateWithoutStan_detailInput, DiskonUncheckedCreateWithoutStan_detailInput> | DiskonCreateWithoutStan_detailInput[] | DiskonUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: DiskonCreateOrConnectWithoutStan_detailInput | DiskonCreateOrConnectWithoutStan_detailInput[]
    createMany?: DiskonCreateManyStan_detailInputEnvelope
    connect?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
  }

  export type MenuUpdateManyWithoutStan_detailNestedInput = {
    create?: XOR<MenuCreateWithoutStan_detailInput, MenuUncheckedCreateWithoutStan_detailInput> | MenuCreateWithoutStan_detailInput[] | MenuUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutStan_detailInput | MenuCreateOrConnectWithoutStan_detailInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutStan_detailInput | MenuUpsertWithWhereUniqueWithoutStan_detailInput[]
    createMany?: MenuCreateManyStan_detailInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutStan_detailInput | MenuUpdateWithWhereUniqueWithoutStan_detailInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutStan_detailInput | MenuUpdateManyWithWhereWithoutStan_detailInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type TransaksiUpdateManyWithoutStan_detailNestedInput = {
    create?: XOR<TransaksiCreateWithoutStan_detailInput, TransaksiUncheckedCreateWithoutStan_detailInput> | TransaksiCreateWithoutStan_detailInput[] | TransaksiUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutStan_detailInput | TransaksiCreateOrConnectWithoutStan_detailInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutStan_detailInput | TransaksiUpsertWithWhereUniqueWithoutStan_detailInput[]
    createMany?: TransaksiCreateManyStan_detailInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutStan_detailInput | TransaksiUpdateWithWhereUniqueWithoutStan_detailInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutStan_detailInput | TransaksiUpdateManyWithWhereWithoutStan_detailInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type DiskonUpdateManyWithoutStan_detailNestedInput = {
    create?: XOR<DiskonCreateWithoutStan_detailInput, DiskonUncheckedCreateWithoutStan_detailInput> | DiskonCreateWithoutStan_detailInput[] | DiskonUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: DiskonCreateOrConnectWithoutStan_detailInput | DiskonCreateOrConnectWithoutStan_detailInput[]
    upsert?: DiskonUpsertWithWhereUniqueWithoutStan_detailInput | DiskonUpsertWithWhereUniqueWithoutStan_detailInput[]
    createMany?: DiskonCreateManyStan_detailInputEnvelope
    set?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    disconnect?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    delete?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    connect?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    update?: DiskonUpdateWithWhereUniqueWithoutStan_detailInput | DiskonUpdateWithWhereUniqueWithoutStan_detailInput[]
    updateMany?: DiskonUpdateManyWithWhereWithoutStan_detailInput | DiskonUpdateManyWithWhereWithoutStan_detailInput[]
    deleteMany?: DiskonScalarWhereInput | DiskonScalarWhereInput[]
  }

  export type UsersUpdateOneWithoutStanNestedInput = {
    create?: XOR<UsersCreateWithoutStanInput, UsersUncheckedCreateWithoutStanInput>
    connectOrCreate?: UsersCreateOrConnectWithoutStanInput
    upsert?: UsersUpsertWithoutStanInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutStanInput, UsersUpdateWithoutStanInput>, UsersUncheckedUpdateWithoutStanInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MenuUncheckedUpdateManyWithoutStan_detailNestedInput = {
    create?: XOR<MenuCreateWithoutStan_detailInput, MenuUncheckedCreateWithoutStan_detailInput> | MenuCreateWithoutStan_detailInput[] | MenuUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutStan_detailInput | MenuCreateOrConnectWithoutStan_detailInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutStan_detailInput | MenuUpsertWithWhereUniqueWithoutStan_detailInput[]
    createMany?: MenuCreateManyStan_detailInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutStan_detailInput | MenuUpdateWithWhereUniqueWithoutStan_detailInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutStan_detailInput | MenuUpdateManyWithWhereWithoutStan_detailInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type TransaksiUncheckedUpdateManyWithoutStan_detailNestedInput = {
    create?: XOR<TransaksiCreateWithoutStan_detailInput, TransaksiUncheckedCreateWithoutStan_detailInput> | TransaksiCreateWithoutStan_detailInput[] | TransaksiUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutStan_detailInput | TransaksiCreateOrConnectWithoutStan_detailInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutStan_detailInput | TransaksiUpsertWithWhereUniqueWithoutStan_detailInput[]
    createMany?: TransaksiCreateManyStan_detailInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutStan_detailInput | TransaksiUpdateWithWhereUniqueWithoutStan_detailInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutStan_detailInput | TransaksiUpdateManyWithWhereWithoutStan_detailInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type DiskonUncheckedUpdateManyWithoutStan_detailNestedInput = {
    create?: XOR<DiskonCreateWithoutStan_detailInput, DiskonUncheckedCreateWithoutStan_detailInput> | DiskonCreateWithoutStan_detailInput[] | DiskonUncheckedCreateWithoutStan_detailInput[]
    connectOrCreate?: DiskonCreateOrConnectWithoutStan_detailInput | DiskonCreateOrConnectWithoutStan_detailInput[]
    upsert?: DiskonUpsertWithWhereUniqueWithoutStan_detailInput | DiskonUpsertWithWhereUniqueWithoutStan_detailInput[]
    createMany?: DiskonCreateManyStan_detailInputEnvelope
    set?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    disconnect?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    delete?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    connect?: DiskonWhereUniqueInput | DiskonWhereUniqueInput[]
    update?: DiskonUpdateWithWhereUniqueWithoutStan_detailInput | DiskonUpdateWithWhereUniqueWithoutStan_detailInput[]
    updateMany?: DiskonUpdateManyWithWhereWithoutStan_detailInput | DiskonUpdateManyWithWhereWithoutStan_detailInput[]
    deleteMany?: DiskonScalarWhereInput | DiskonScalarWhereInput[]
  }

  export type TransaksiCreateNestedManyWithoutSiswa_detailInput = {
    create?: XOR<TransaksiCreateWithoutSiswa_detailInput, TransaksiUncheckedCreateWithoutSiswa_detailInput> | TransaksiCreateWithoutSiswa_detailInput[] | TransaksiUncheckedCreateWithoutSiswa_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutSiswa_detailInput | TransaksiCreateOrConnectWithoutSiswa_detailInput[]
    createMany?: TransaksiCreateManySiswa_detailInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type UsersCreateNestedOneWithoutSiswaInput = {
    create?: XOR<UsersCreateWithoutSiswaInput, UsersUncheckedCreateWithoutSiswaInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSiswaInput
    connect?: UsersWhereUniqueInput
  }

  export type TransaksiUncheckedCreateNestedManyWithoutSiswa_detailInput = {
    create?: XOR<TransaksiCreateWithoutSiswa_detailInput, TransaksiUncheckedCreateWithoutSiswa_detailInput> | TransaksiCreateWithoutSiswa_detailInput[] | TransaksiUncheckedCreateWithoutSiswa_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutSiswa_detailInput | TransaksiCreateOrConnectWithoutSiswa_detailInput[]
    createMany?: TransaksiCreateManySiswa_detailInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type TransaksiUpdateManyWithoutSiswa_detailNestedInput = {
    create?: XOR<TransaksiCreateWithoutSiswa_detailInput, TransaksiUncheckedCreateWithoutSiswa_detailInput> | TransaksiCreateWithoutSiswa_detailInput[] | TransaksiUncheckedCreateWithoutSiswa_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutSiswa_detailInput | TransaksiCreateOrConnectWithoutSiswa_detailInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutSiswa_detailInput | TransaksiUpsertWithWhereUniqueWithoutSiswa_detailInput[]
    createMany?: TransaksiCreateManySiswa_detailInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutSiswa_detailInput | TransaksiUpdateWithWhereUniqueWithoutSiswa_detailInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutSiswa_detailInput | TransaksiUpdateManyWithWhereWithoutSiswa_detailInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type UsersUpdateOneWithoutSiswaNestedInput = {
    create?: XOR<UsersCreateWithoutSiswaInput, UsersUncheckedCreateWithoutSiswaInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSiswaInput
    upsert?: UsersUpsertWithoutSiswaInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSiswaInput, UsersUpdateWithoutSiswaInput>, UsersUncheckedUpdateWithoutSiswaInput>
  }

  export type TransaksiUncheckedUpdateManyWithoutSiswa_detailNestedInput = {
    create?: XOR<TransaksiCreateWithoutSiswa_detailInput, TransaksiUncheckedCreateWithoutSiswa_detailInput> | TransaksiCreateWithoutSiswa_detailInput[] | TransaksiUncheckedCreateWithoutSiswa_detailInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutSiswa_detailInput | TransaksiCreateOrConnectWithoutSiswa_detailInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutSiswa_detailInput | TransaksiUpsertWithWhereUniqueWithoutSiswa_detailInput[]
    createMany?: TransaksiCreateManySiswa_detailInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutSiswa_detailInput | TransaksiUpdateWithWhereUniqueWithoutSiswa_detailInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutSiswa_detailInput | TransaksiUpdateManyWithWhereWithoutSiswa_detailInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type StanCreateNestedOneWithoutMenuInput = {
    create?: XOR<StanCreateWithoutMenuInput, StanUncheckedCreateWithoutMenuInput>
    connectOrCreate?: StanCreateOrConnectWithoutMenuInput
    connect?: StanWhereUniqueInput
  }

  export type MenuDiskonCreateNestedManyWithoutMenu_detailInput = {
    create?: XOR<MenuDiskonCreateWithoutMenu_detailInput, MenuDiskonUncheckedCreateWithoutMenu_detailInput> | MenuDiskonCreateWithoutMenu_detailInput[] | MenuDiskonUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutMenu_detailInput | MenuDiskonCreateOrConnectWithoutMenu_detailInput[]
    createMany?: MenuDiskonCreateManyMenu_detailInputEnvelope
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
  }

  export type DetailTransaksiCreateNestedManyWithoutMenu_detailInput = {
    create?: XOR<DetailTransaksiCreateWithoutMenu_detailInput, DetailTransaksiUncheckedCreateWithoutMenu_detailInput> | DetailTransaksiCreateWithoutMenu_detailInput[] | DetailTransaksiUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutMenu_detailInput | DetailTransaksiCreateOrConnectWithoutMenu_detailInput[]
    createMany?: DetailTransaksiCreateManyMenu_detailInputEnvelope
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
  }

  export type MenuDiskonUncheckedCreateNestedManyWithoutMenu_detailInput = {
    create?: XOR<MenuDiskonCreateWithoutMenu_detailInput, MenuDiskonUncheckedCreateWithoutMenu_detailInput> | MenuDiskonCreateWithoutMenu_detailInput[] | MenuDiskonUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutMenu_detailInput | MenuDiskonCreateOrConnectWithoutMenu_detailInput[]
    createMany?: MenuDiskonCreateManyMenu_detailInputEnvelope
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
  }

  export type DetailTransaksiUncheckedCreateNestedManyWithoutMenu_detailInput = {
    create?: XOR<DetailTransaksiCreateWithoutMenu_detailInput, DetailTransaksiUncheckedCreateWithoutMenu_detailInput> | DetailTransaksiCreateWithoutMenu_detailInput[] | DetailTransaksiUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutMenu_detailInput | DetailTransaksiCreateOrConnectWithoutMenu_detailInput[]
    createMany?: DetailTransaksiCreateManyMenu_detailInputEnvelope
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
  }

  export type EnumJENISFieldUpdateOperationsInput = {
    set?: $Enums.JENIS
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StanUpdateOneRequiredWithoutMenuNestedInput = {
    create?: XOR<StanCreateWithoutMenuInput, StanUncheckedCreateWithoutMenuInput>
    connectOrCreate?: StanCreateOrConnectWithoutMenuInput
    upsert?: StanUpsertWithoutMenuInput
    connect?: StanWhereUniqueInput
    update?: XOR<XOR<StanUpdateToOneWithWhereWithoutMenuInput, StanUpdateWithoutMenuInput>, StanUncheckedUpdateWithoutMenuInput>
  }

  export type MenuDiskonUpdateManyWithoutMenu_detailNestedInput = {
    create?: XOR<MenuDiskonCreateWithoutMenu_detailInput, MenuDiskonUncheckedCreateWithoutMenu_detailInput> | MenuDiskonCreateWithoutMenu_detailInput[] | MenuDiskonUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutMenu_detailInput | MenuDiskonCreateOrConnectWithoutMenu_detailInput[]
    upsert?: MenuDiskonUpsertWithWhereUniqueWithoutMenu_detailInput | MenuDiskonUpsertWithWhereUniqueWithoutMenu_detailInput[]
    createMany?: MenuDiskonCreateManyMenu_detailInputEnvelope
    set?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    disconnect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    delete?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    update?: MenuDiskonUpdateWithWhereUniqueWithoutMenu_detailInput | MenuDiskonUpdateWithWhereUniqueWithoutMenu_detailInput[]
    updateMany?: MenuDiskonUpdateManyWithWhereWithoutMenu_detailInput | MenuDiskonUpdateManyWithWhereWithoutMenu_detailInput[]
    deleteMany?: MenuDiskonScalarWhereInput | MenuDiskonScalarWhereInput[]
  }

  export type DetailTransaksiUpdateManyWithoutMenu_detailNestedInput = {
    create?: XOR<DetailTransaksiCreateWithoutMenu_detailInput, DetailTransaksiUncheckedCreateWithoutMenu_detailInput> | DetailTransaksiCreateWithoutMenu_detailInput[] | DetailTransaksiUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutMenu_detailInput | DetailTransaksiCreateOrConnectWithoutMenu_detailInput[]
    upsert?: DetailTransaksiUpsertWithWhereUniqueWithoutMenu_detailInput | DetailTransaksiUpsertWithWhereUniqueWithoutMenu_detailInput[]
    createMany?: DetailTransaksiCreateManyMenu_detailInputEnvelope
    set?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    disconnect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    delete?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    update?: DetailTransaksiUpdateWithWhereUniqueWithoutMenu_detailInput | DetailTransaksiUpdateWithWhereUniqueWithoutMenu_detailInput[]
    updateMany?: DetailTransaksiUpdateManyWithWhereWithoutMenu_detailInput | DetailTransaksiUpdateManyWithWhereWithoutMenu_detailInput[]
    deleteMany?: DetailTransaksiScalarWhereInput | DetailTransaksiScalarWhereInput[]
  }

  export type MenuDiskonUncheckedUpdateManyWithoutMenu_detailNestedInput = {
    create?: XOR<MenuDiskonCreateWithoutMenu_detailInput, MenuDiskonUncheckedCreateWithoutMenu_detailInput> | MenuDiskonCreateWithoutMenu_detailInput[] | MenuDiskonUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutMenu_detailInput | MenuDiskonCreateOrConnectWithoutMenu_detailInput[]
    upsert?: MenuDiskonUpsertWithWhereUniqueWithoutMenu_detailInput | MenuDiskonUpsertWithWhereUniqueWithoutMenu_detailInput[]
    createMany?: MenuDiskonCreateManyMenu_detailInputEnvelope
    set?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    disconnect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    delete?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    update?: MenuDiskonUpdateWithWhereUniqueWithoutMenu_detailInput | MenuDiskonUpdateWithWhereUniqueWithoutMenu_detailInput[]
    updateMany?: MenuDiskonUpdateManyWithWhereWithoutMenu_detailInput | MenuDiskonUpdateManyWithWhereWithoutMenu_detailInput[]
    deleteMany?: MenuDiskonScalarWhereInput | MenuDiskonScalarWhereInput[]
  }

  export type DetailTransaksiUncheckedUpdateManyWithoutMenu_detailNestedInput = {
    create?: XOR<DetailTransaksiCreateWithoutMenu_detailInput, DetailTransaksiUncheckedCreateWithoutMenu_detailInput> | DetailTransaksiCreateWithoutMenu_detailInput[] | DetailTransaksiUncheckedCreateWithoutMenu_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutMenu_detailInput | DetailTransaksiCreateOrConnectWithoutMenu_detailInput[]
    upsert?: DetailTransaksiUpsertWithWhereUniqueWithoutMenu_detailInput | DetailTransaksiUpsertWithWhereUniqueWithoutMenu_detailInput[]
    createMany?: DetailTransaksiCreateManyMenu_detailInputEnvelope
    set?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    disconnect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    delete?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    update?: DetailTransaksiUpdateWithWhereUniqueWithoutMenu_detailInput | DetailTransaksiUpdateWithWhereUniqueWithoutMenu_detailInput[]
    updateMany?: DetailTransaksiUpdateManyWithWhereWithoutMenu_detailInput | DetailTransaksiUpdateManyWithWhereWithoutMenu_detailInput[]
    deleteMany?: DetailTransaksiScalarWhereInput | DetailTransaksiScalarWhereInput[]
  }

  export type StanCreateNestedOneWithoutDiskonInput = {
    create?: XOR<StanCreateWithoutDiskonInput, StanUncheckedCreateWithoutDiskonInput>
    connectOrCreate?: StanCreateOrConnectWithoutDiskonInput
    connect?: StanWhereUniqueInput
  }

  export type MenuDiskonCreateNestedManyWithoutDiskon_detailInput = {
    create?: XOR<MenuDiskonCreateWithoutDiskon_detailInput, MenuDiskonUncheckedCreateWithoutDiskon_detailInput> | MenuDiskonCreateWithoutDiskon_detailInput[] | MenuDiskonUncheckedCreateWithoutDiskon_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutDiskon_detailInput | MenuDiskonCreateOrConnectWithoutDiskon_detailInput[]
    createMany?: MenuDiskonCreateManyDiskon_detailInputEnvelope
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
  }

  export type MenuDiskonUncheckedCreateNestedManyWithoutDiskon_detailInput = {
    create?: XOR<MenuDiskonCreateWithoutDiskon_detailInput, MenuDiskonUncheckedCreateWithoutDiskon_detailInput> | MenuDiskonCreateWithoutDiskon_detailInput[] | MenuDiskonUncheckedCreateWithoutDiskon_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutDiskon_detailInput | MenuDiskonCreateOrConnectWithoutDiskon_detailInput[]
    createMany?: MenuDiskonCreateManyDiskon_detailInputEnvelope
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
  }

  export type StanUpdateOneRequiredWithoutDiskonNestedInput = {
    create?: XOR<StanCreateWithoutDiskonInput, StanUncheckedCreateWithoutDiskonInput>
    connectOrCreate?: StanCreateOrConnectWithoutDiskonInput
    upsert?: StanUpsertWithoutDiskonInput
    connect?: StanWhereUniqueInput
    update?: XOR<XOR<StanUpdateToOneWithWhereWithoutDiskonInput, StanUpdateWithoutDiskonInput>, StanUncheckedUpdateWithoutDiskonInput>
  }

  export type MenuDiskonUpdateManyWithoutDiskon_detailNestedInput = {
    create?: XOR<MenuDiskonCreateWithoutDiskon_detailInput, MenuDiskonUncheckedCreateWithoutDiskon_detailInput> | MenuDiskonCreateWithoutDiskon_detailInput[] | MenuDiskonUncheckedCreateWithoutDiskon_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutDiskon_detailInput | MenuDiskonCreateOrConnectWithoutDiskon_detailInput[]
    upsert?: MenuDiskonUpsertWithWhereUniqueWithoutDiskon_detailInput | MenuDiskonUpsertWithWhereUniqueWithoutDiskon_detailInput[]
    createMany?: MenuDiskonCreateManyDiskon_detailInputEnvelope
    set?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    disconnect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    delete?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    update?: MenuDiskonUpdateWithWhereUniqueWithoutDiskon_detailInput | MenuDiskonUpdateWithWhereUniqueWithoutDiskon_detailInput[]
    updateMany?: MenuDiskonUpdateManyWithWhereWithoutDiskon_detailInput | MenuDiskonUpdateManyWithWhereWithoutDiskon_detailInput[]
    deleteMany?: MenuDiskonScalarWhereInput | MenuDiskonScalarWhereInput[]
  }

  export type MenuDiskonUncheckedUpdateManyWithoutDiskon_detailNestedInput = {
    create?: XOR<MenuDiskonCreateWithoutDiskon_detailInput, MenuDiskonUncheckedCreateWithoutDiskon_detailInput> | MenuDiskonCreateWithoutDiskon_detailInput[] | MenuDiskonUncheckedCreateWithoutDiskon_detailInput[]
    connectOrCreate?: MenuDiskonCreateOrConnectWithoutDiskon_detailInput | MenuDiskonCreateOrConnectWithoutDiskon_detailInput[]
    upsert?: MenuDiskonUpsertWithWhereUniqueWithoutDiskon_detailInput | MenuDiskonUpsertWithWhereUniqueWithoutDiskon_detailInput[]
    createMany?: MenuDiskonCreateManyDiskon_detailInputEnvelope
    set?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    disconnect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    delete?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    connect?: MenuDiskonWhereUniqueInput | MenuDiskonWhereUniqueInput[]
    update?: MenuDiskonUpdateWithWhereUniqueWithoutDiskon_detailInput | MenuDiskonUpdateWithWhereUniqueWithoutDiskon_detailInput[]
    updateMany?: MenuDiskonUpdateManyWithWhereWithoutDiskon_detailInput | MenuDiskonUpdateManyWithWhereWithoutDiskon_detailInput[]
    deleteMany?: MenuDiskonScalarWhereInput | MenuDiskonScalarWhereInput[]
  }

  export type MenuCreateNestedOneWithoutMenuDiskonInput = {
    create?: XOR<MenuCreateWithoutMenuDiskonInput, MenuUncheckedCreateWithoutMenuDiskonInput>
    connectOrCreate?: MenuCreateOrConnectWithoutMenuDiskonInput
    connect?: MenuWhereUniqueInput
  }

  export type DiskonCreateNestedOneWithoutMenuDiskonInput = {
    create?: XOR<DiskonCreateWithoutMenuDiskonInput, DiskonUncheckedCreateWithoutMenuDiskonInput>
    connectOrCreate?: DiskonCreateOrConnectWithoutMenuDiskonInput
    connect?: DiskonWhereUniqueInput
  }

  export type MenuUpdateOneRequiredWithoutMenuDiskonNestedInput = {
    create?: XOR<MenuCreateWithoutMenuDiskonInput, MenuUncheckedCreateWithoutMenuDiskonInput>
    connectOrCreate?: MenuCreateOrConnectWithoutMenuDiskonInput
    upsert?: MenuUpsertWithoutMenuDiskonInput
    connect?: MenuWhereUniqueInput
    update?: XOR<XOR<MenuUpdateToOneWithWhereWithoutMenuDiskonInput, MenuUpdateWithoutMenuDiskonInput>, MenuUncheckedUpdateWithoutMenuDiskonInput>
  }

  export type DiskonUpdateOneRequiredWithoutMenuDiskonNestedInput = {
    create?: XOR<DiskonCreateWithoutMenuDiskonInput, DiskonUncheckedCreateWithoutMenuDiskonInput>
    connectOrCreate?: DiskonCreateOrConnectWithoutMenuDiskonInput
    upsert?: DiskonUpsertWithoutMenuDiskonInput
    connect?: DiskonWhereUniqueInput
    update?: XOR<XOR<DiskonUpdateToOneWithWhereWithoutMenuDiskonInput, DiskonUpdateWithoutMenuDiskonInput>, DiskonUncheckedUpdateWithoutMenuDiskonInput>
  }

  export type StanCreateNestedOneWithoutTransaksiInput = {
    create?: XOR<StanCreateWithoutTransaksiInput, StanUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: StanCreateOrConnectWithoutTransaksiInput
    connect?: StanWhereUniqueInput
  }

  export type SiswaCreateNestedOneWithoutTransaksiInput = {
    create?: XOR<SiswaCreateWithoutTransaksiInput, SiswaUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: SiswaCreateOrConnectWithoutTransaksiInput
    connect?: SiswaWhereUniqueInput
  }

  export type DetailTransaksiCreateNestedManyWithoutTransaksi_detailInput = {
    create?: XOR<DetailTransaksiCreateWithoutTransaksi_detailInput, DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput> | DetailTransaksiCreateWithoutTransaksi_detailInput[] | DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput | DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput[]
    createMany?: DetailTransaksiCreateManyTransaksi_detailInputEnvelope
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
  }

  export type DetailTransaksiUncheckedCreateNestedManyWithoutTransaksi_detailInput = {
    create?: XOR<DetailTransaksiCreateWithoutTransaksi_detailInput, DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput> | DetailTransaksiCreateWithoutTransaksi_detailInput[] | DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput | DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput[]
    createMany?: DetailTransaksiCreateManyTransaksi_detailInputEnvelope
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
  }

  export type EnumSTATUSFieldUpdateOperationsInput = {
    set?: $Enums.STATUS
  }

  export type StanUpdateOneRequiredWithoutTransaksiNestedInput = {
    create?: XOR<StanCreateWithoutTransaksiInput, StanUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: StanCreateOrConnectWithoutTransaksiInput
    upsert?: StanUpsertWithoutTransaksiInput
    connect?: StanWhereUniqueInput
    update?: XOR<XOR<StanUpdateToOneWithWhereWithoutTransaksiInput, StanUpdateWithoutTransaksiInput>, StanUncheckedUpdateWithoutTransaksiInput>
  }

  export type SiswaUpdateOneRequiredWithoutTransaksiNestedInput = {
    create?: XOR<SiswaCreateWithoutTransaksiInput, SiswaUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: SiswaCreateOrConnectWithoutTransaksiInput
    upsert?: SiswaUpsertWithoutTransaksiInput
    connect?: SiswaWhereUniqueInput
    update?: XOR<XOR<SiswaUpdateToOneWithWhereWithoutTransaksiInput, SiswaUpdateWithoutTransaksiInput>, SiswaUncheckedUpdateWithoutTransaksiInput>
  }

  export type DetailTransaksiUpdateManyWithoutTransaksi_detailNestedInput = {
    create?: XOR<DetailTransaksiCreateWithoutTransaksi_detailInput, DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput> | DetailTransaksiCreateWithoutTransaksi_detailInput[] | DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput | DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput[]
    upsert?: DetailTransaksiUpsertWithWhereUniqueWithoutTransaksi_detailInput | DetailTransaksiUpsertWithWhereUniqueWithoutTransaksi_detailInput[]
    createMany?: DetailTransaksiCreateManyTransaksi_detailInputEnvelope
    set?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    disconnect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    delete?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    update?: DetailTransaksiUpdateWithWhereUniqueWithoutTransaksi_detailInput | DetailTransaksiUpdateWithWhereUniqueWithoutTransaksi_detailInput[]
    updateMany?: DetailTransaksiUpdateManyWithWhereWithoutTransaksi_detailInput | DetailTransaksiUpdateManyWithWhereWithoutTransaksi_detailInput[]
    deleteMany?: DetailTransaksiScalarWhereInput | DetailTransaksiScalarWhereInput[]
  }

  export type DetailTransaksiUncheckedUpdateManyWithoutTransaksi_detailNestedInput = {
    create?: XOR<DetailTransaksiCreateWithoutTransaksi_detailInput, DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput> | DetailTransaksiCreateWithoutTransaksi_detailInput[] | DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput[]
    connectOrCreate?: DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput | DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput[]
    upsert?: DetailTransaksiUpsertWithWhereUniqueWithoutTransaksi_detailInput | DetailTransaksiUpsertWithWhereUniqueWithoutTransaksi_detailInput[]
    createMany?: DetailTransaksiCreateManyTransaksi_detailInputEnvelope
    set?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    disconnect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    delete?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    connect?: DetailTransaksiWhereUniqueInput | DetailTransaksiWhereUniqueInput[]
    update?: DetailTransaksiUpdateWithWhereUniqueWithoutTransaksi_detailInput | DetailTransaksiUpdateWithWhereUniqueWithoutTransaksi_detailInput[]
    updateMany?: DetailTransaksiUpdateManyWithWhereWithoutTransaksi_detailInput | DetailTransaksiUpdateManyWithWhereWithoutTransaksi_detailInput[]
    deleteMany?: DetailTransaksiScalarWhereInput | DetailTransaksiScalarWhereInput[]
  }

  export type TransaksiCreateNestedOneWithoutDetailTransaksiInput = {
    create?: XOR<TransaksiCreateWithoutDetailTransaksiInput, TransaksiUncheckedCreateWithoutDetailTransaksiInput>
    connectOrCreate?: TransaksiCreateOrConnectWithoutDetailTransaksiInput
    connect?: TransaksiWhereUniqueInput
  }

  export type MenuCreateNestedOneWithoutDetailTransaksiInput = {
    create?: XOR<MenuCreateWithoutDetailTransaksiInput, MenuUncheckedCreateWithoutDetailTransaksiInput>
    connectOrCreate?: MenuCreateOrConnectWithoutDetailTransaksiInput
    connect?: MenuWhereUniqueInput
  }

  export type TransaksiUpdateOneRequiredWithoutDetailTransaksiNestedInput = {
    create?: XOR<TransaksiCreateWithoutDetailTransaksiInput, TransaksiUncheckedCreateWithoutDetailTransaksiInput>
    connectOrCreate?: TransaksiCreateOrConnectWithoutDetailTransaksiInput
    upsert?: TransaksiUpsertWithoutDetailTransaksiInput
    connect?: TransaksiWhereUniqueInput
    update?: XOR<XOR<TransaksiUpdateToOneWithWhereWithoutDetailTransaksiInput, TransaksiUpdateWithoutDetailTransaksiInput>, TransaksiUncheckedUpdateWithoutDetailTransaksiInput>
  }

  export type MenuUpdateOneRequiredWithoutDetailTransaksiNestedInput = {
    create?: XOR<MenuCreateWithoutDetailTransaksiInput, MenuUncheckedCreateWithoutDetailTransaksiInput>
    connectOrCreate?: MenuCreateOrConnectWithoutDetailTransaksiInput
    upsert?: MenuUpsertWithoutDetailTransaksiInput
    connect?: MenuWhereUniqueInput
    update?: XOR<XOR<MenuUpdateToOneWithWhereWithoutDetailTransaksiInput, MenuUpdateWithoutDetailTransaksiInput>, MenuUncheckedUpdateWithoutDetailTransaksiInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumROLEFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[]
    notIn?: $Enums.ROLE[]
    not?: NestedEnumROLEFilter<$PrismaModel> | $Enums.ROLE
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumROLEWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[]
    notIn?: $Enums.ROLE[]
    not?: NestedEnumROLEWithAggregatesFilter<$PrismaModel> | $Enums.ROLE
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLEFilter<$PrismaModel>
    _max?: NestedEnumROLEFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumJENISFilter<$PrismaModel = never> = {
    equals?: $Enums.JENIS | EnumJENISFieldRefInput<$PrismaModel>
    in?: $Enums.JENIS[]
    notIn?: $Enums.JENIS[]
    not?: NestedEnumJENISFilter<$PrismaModel> | $Enums.JENIS
  }

  export type NestedEnumJENISWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JENIS | EnumJENISFieldRefInput<$PrismaModel>
    in?: $Enums.JENIS[]
    notIn?: $Enums.JENIS[]
    not?: NestedEnumJENISWithAggregatesFilter<$PrismaModel> | $Enums.JENIS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJENISFilter<$PrismaModel>
    _max?: NestedEnumJENISFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumSTATUSFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSFilter<$PrismaModel> | $Enums.STATUS
  }

  export type NestedEnumSTATUSWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.STATUS | EnumSTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.STATUS[]
    notIn?: $Enums.STATUS[]
    not?: NestedEnumSTATUSWithAggregatesFilter<$PrismaModel> | $Enums.STATUS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSTATUSFilter<$PrismaModel>
    _max?: NestedEnumSTATUSFilter<$PrismaModel>
  }

  export type StanCreateWithoutUsersInput = {
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuCreateNestedManyWithoutStan_detailInput
    Transaksi?: TransaksiCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonCreateNestedManyWithoutStan_detailInput
  }

  export type StanUncheckedCreateWithoutUsersInput = {
    id?: number
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuUncheckedCreateNestedManyWithoutStan_detailInput
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonUncheckedCreateNestedManyWithoutStan_detailInput
  }

  export type StanCreateOrConnectWithoutUsersInput = {
    where: StanWhereUniqueInput
    create: XOR<StanCreateWithoutUsersInput, StanUncheckedCreateWithoutUsersInput>
  }

  export type SiswaCreateWithoutUsersInput = {
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Transaksi?: TransaksiCreateNestedManyWithoutSiswa_detailInput
  }

  export type SiswaUncheckedCreateWithoutUsersInput = {
    id?: number
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutSiswa_detailInput
  }

  export type SiswaCreateOrConnectWithoutUsersInput = {
    where: SiswaWhereUniqueInput
    create: XOR<SiswaCreateWithoutUsersInput, SiswaUncheckedCreateWithoutUsersInput>
  }

  export type StanUpsertWithoutUsersInput = {
    update: XOR<StanUpdateWithoutUsersInput, StanUncheckedUpdateWithoutUsersInput>
    create: XOR<StanCreateWithoutUsersInput, StanUncheckedCreateWithoutUsersInput>
    where?: StanWhereInput
  }

  export type StanUpdateToOneWithWhereWithoutUsersInput = {
    where?: StanWhereInput
    data: XOR<StanUpdateWithoutUsersInput, StanUncheckedUpdateWithoutUsersInput>
  }

  export type StanUpdateWithoutUsersInput = {
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUpdateManyWithoutStan_detailNestedInput
    Transaksi?: TransaksiUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUpdateManyWithoutStan_detailNestedInput
  }

  export type StanUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUncheckedUpdateManyWithoutStan_detailNestedInput
    Transaksi?: TransaksiUncheckedUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUncheckedUpdateManyWithoutStan_detailNestedInput
  }

  export type SiswaUpsertWithoutUsersInput = {
    update: XOR<SiswaUpdateWithoutUsersInput, SiswaUncheckedUpdateWithoutUsersInput>
    create: XOR<SiswaCreateWithoutUsersInput, SiswaUncheckedCreateWithoutUsersInput>
    where?: SiswaWhereInput
  }

  export type SiswaUpdateToOneWithWhereWithoutUsersInput = {
    where?: SiswaWhereInput
    data: XOR<SiswaUpdateWithoutUsersInput, SiswaUncheckedUpdateWithoutUsersInput>
  }

  export type SiswaUpdateWithoutUsersInput = {
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transaksi?: TransaksiUpdateManyWithoutSiswa_detailNestedInput
  }

  export type SiswaUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transaksi?: TransaksiUncheckedUpdateManyWithoutSiswa_detailNestedInput
  }

  export type MenuCreateWithoutStan_detailInput = {
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonCreateNestedManyWithoutMenu_detailInput
    DetailTransaksi?: DetailTransaksiCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuUncheckedCreateWithoutStan_detailInput = {
    id?: number
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonUncheckedCreateNestedManyWithoutMenu_detailInput
    DetailTransaksi?: DetailTransaksiUncheckedCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuCreateOrConnectWithoutStan_detailInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutStan_detailInput, MenuUncheckedCreateWithoutStan_detailInput>
  }

  export type MenuCreateManyStan_detailInputEnvelope = {
    data: MenuCreateManyStan_detailInput | MenuCreateManyStan_detailInput[]
    skipDuplicates?: boolean
  }

  export type TransaksiCreateWithoutStan_detailInput = {
    tanggal?: Date | string
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    siswa_detail?: SiswaCreateNestedOneWithoutTransaksiInput
    DetailTransaksi?: DetailTransaksiCreateNestedManyWithoutTransaksi_detailInput
  }

  export type TransaksiUncheckedCreateWithoutStan_detailInput = {
    id?: number
    tanggal?: Date | string
    id_siswa?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    DetailTransaksi?: DetailTransaksiUncheckedCreateNestedManyWithoutTransaksi_detailInput
  }

  export type TransaksiCreateOrConnectWithoutStan_detailInput = {
    where: TransaksiWhereUniqueInput
    create: XOR<TransaksiCreateWithoutStan_detailInput, TransaksiUncheckedCreateWithoutStan_detailInput>
  }

  export type TransaksiCreateManyStan_detailInputEnvelope = {
    data: TransaksiCreateManyStan_detailInput | TransaksiCreateManyStan_detailInput[]
    skipDuplicates?: boolean
  }

  export type DiskonCreateWithoutStan_detailInput = {
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonCreateNestedManyWithoutDiskon_detailInput
  }

  export type DiskonUncheckedCreateWithoutStan_detailInput = {
    id?: number
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonUncheckedCreateNestedManyWithoutDiskon_detailInput
  }

  export type DiskonCreateOrConnectWithoutStan_detailInput = {
    where: DiskonWhereUniqueInput
    create: XOR<DiskonCreateWithoutStan_detailInput, DiskonUncheckedCreateWithoutStan_detailInput>
  }

  export type DiskonCreateManyStan_detailInputEnvelope = {
    data: DiskonCreateManyStan_detailInput | DiskonCreateManyStan_detailInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutStanInput = {
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siswa?: SiswaCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutStanInput = {
    id?: number
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siswa?: SiswaUncheckedCreateNestedOneWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutStanInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutStanInput, UsersUncheckedCreateWithoutStanInput>
  }

  export type MenuUpsertWithWhereUniqueWithoutStan_detailInput = {
    where: MenuWhereUniqueInput
    update: XOR<MenuUpdateWithoutStan_detailInput, MenuUncheckedUpdateWithoutStan_detailInput>
    create: XOR<MenuCreateWithoutStan_detailInput, MenuUncheckedCreateWithoutStan_detailInput>
  }

  export type MenuUpdateWithWhereUniqueWithoutStan_detailInput = {
    where: MenuWhereUniqueInput
    data: XOR<MenuUpdateWithoutStan_detailInput, MenuUncheckedUpdateWithoutStan_detailInput>
  }

  export type MenuUpdateManyWithWhereWithoutStan_detailInput = {
    where: MenuScalarWhereInput
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyWithoutStan_detailInput>
  }

  export type MenuScalarWhereInput = {
    AND?: MenuScalarWhereInput | MenuScalarWhereInput[]
    OR?: MenuScalarWhereInput[]
    NOT?: MenuScalarWhereInput | MenuScalarWhereInput[]
    id?: IntFilter<"Menu"> | number
    nama_makanan?: StringFilter<"Menu"> | string
    jenis?: EnumJENISFilter<"Menu"> | $Enums.JENIS
    harga?: FloatFilter<"Menu"> | number
    foto?: StringFilter<"Menu"> | string
    deskripsi?: StringFilter<"Menu"> | string
    id_stan?: IntFilter<"Menu"> | number
    createdAt?: DateTimeFilter<"Menu"> | Date | string
    updatedAt?: DateTimeFilter<"Menu"> | Date | string
  }

  export type TransaksiUpsertWithWhereUniqueWithoutStan_detailInput = {
    where: TransaksiWhereUniqueInput
    update: XOR<TransaksiUpdateWithoutStan_detailInput, TransaksiUncheckedUpdateWithoutStan_detailInput>
    create: XOR<TransaksiCreateWithoutStan_detailInput, TransaksiUncheckedCreateWithoutStan_detailInput>
  }

  export type TransaksiUpdateWithWhereUniqueWithoutStan_detailInput = {
    where: TransaksiWhereUniqueInput
    data: XOR<TransaksiUpdateWithoutStan_detailInput, TransaksiUncheckedUpdateWithoutStan_detailInput>
  }

  export type TransaksiUpdateManyWithWhereWithoutStan_detailInput = {
    where: TransaksiScalarWhereInput
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyWithoutStan_detailInput>
  }

  export type TransaksiScalarWhereInput = {
    AND?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
    OR?: TransaksiScalarWhereInput[]
    NOT?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
    id?: IntFilter<"Transaksi"> | number
    tanggal?: DateTimeFilter<"Transaksi"> | Date | string
    id_stan?: IntFilter<"Transaksi"> | number
    id_siswa?: IntFilter<"Transaksi"> | number
    status?: EnumSTATUSFilter<"Transaksi"> | $Enums.STATUS
    createdAt?: DateTimeFilter<"Transaksi"> | Date | string
    updatedAt?: DateTimeFilter<"Transaksi"> | Date | string
  }

  export type DiskonUpsertWithWhereUniqueWithoutStan_detailInput = {
    where: DiskonWhereUniqueInput
    update: XOR<DiskonUpdateWithoutStan_detailInput, DiskonUncheckedUpdateWithoutStan_detailInput>
    create: XOR<DiskonCreateWithoutStan_detailInput, DiskonUncheckedCreateWithoutStan_detailInput>
  }

  export type DiskonUpdateWithWhereUniqueWithoutStan_detailInput = {
    where: DiskonWhereUniqueInput
    data: XOR<DiskonUpdateWithoutStan_detailInput, DiskonUncheckedUpdateWithoutStan_detailInput>
  }

  export type DiskonUpdateManyWithWhereWithoutStan_detailInput = {
    where: DiskonScalarWhereInput
    data: XOR<DiskonUpdateManyMutationInput, DiskonUncheckedUpdateManyWithoutStan_detailInput>
  }

  export type DiskonScalarWhereInput = {
    AND?: DiskonScalarWhereInput | DiskonScalarWhereInput[]
    OR?: DiskonScalarWhereInput[]
    NOT?: DiskonScalarWhereInput | DiskonScalarWhereInput[]
    id?: IntFilter<"Diskon"> | number
    id_stan?: IntFilter<"Diskon"> | number
    nama_diskon?: StringFilter<"Diskon"> | string
    persentase_diskon?: FloatFilter<"Diskon"> | number
    tanggal_awal?: DateTimeFilter<"Diskon"> | Date | string
    tanggal_akhir?: DateTimeFilter<"Diskon"> | Date | string
    createdAt?: DateTimeFilter<"Diskon"> | Date | string
    updatedAt?: DateTimeFilter<"Diskon"> | Date | string
  }

  export type UsersUpsertWithoutStanInput = {
    update: XOR<UsersUpdateWithoutStanInput, UsersUncheckedUpdateWithoutStanInput>
    create: XOR<UsersCreateWithoutStanInput, UsersUncheckedCreateWithoutStanInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutStanInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutStanInput, UsersUncheckedUpdateWithoutStanInput>
  }

  export type UsersUpdateWithoutStanInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siswa?: SiswaUpdateOneWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutStanInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siswa?: SiswaUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type TransaksiCreateWithoutSiswa_detailInput = {
    tanggal?: Date | string
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutTransaksiInput
    DetailTransaksi?: DetailTransaksiCreateNestedManyWithoutTransaksi_detailInput
  }

  export type TransaksiUncheckedCreateWithoutSiswa_detailInput = {
    id?: number
    tanggal?: Date | string
    id_stan?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    DetailTransaksi?: DetailTransaksiUncheckedCreateNestedManyWithoutTransaksi_detailInput
  }

  export type TransaksiCreateOrConnectWithoutSiswa_detailInput = {
    where: TransaksiWhereUniqueInput
    create: XOR<TransaksiCreateWithoutSiswa_detailInput, TransaksiUncheckedCreateWithoutSiswa_detailInput>
  }

  export type TransaksiCreateManySiswa_detailInputEnvelope = {
    data: TransaksiCreateManySiswa_detailInput | TransaksiCreateManySiswa_detailInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutSiswaInput = {
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stan?: StanCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutSiswaInput = {
    id?: number
    username: string
    password?: string
    role?: $Enums.ROLE
    kode_verifikasi?: string | null
    verifikasi_exp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stan?: StanUncheckedCreateNestedOneWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutSiswaInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSiswaInput, UsersUncheckedCreateWithoutSiswaInput>
  }

  export type TransaksiUpsertWithWhereUniqueWithoutSiswa_detailInput = {
    where: TransaksiWhereUniqueInput
    update: XOR<TransaksiUpdateWithoutSiswa_detailInput, TransaksiUncheckedUpdateWithoutSiswa_detailInput>
    create: XOR<TransaksiCreateWithoutSiswa_detailInput, TransaksiUncheckedCreateWithoutSiswa_detailInput>
  }

  export type TransaksiUpdateWithWhereUniqueWithoutSiswa_detailInput = {
    where: TransaksiWhereUniqueInput
    data: XOR<TransaksiUpdateWithoutSiswa_detailInput, TransaksiUncheckedUpdateWithoutSiswa_detailInput>
  }

  export type TransaksiUpdateManyWithWhereWithoutSiswa_detailInput = {
    where: TransaksiScalarWhereInput
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyWithoutSiswa_detailInput>
  }

  export type UsersUpsertWithoutSiswaInput = {
    update: XOR<UsersUpdateWithoutSiswaInput, UsersUncheckedUpdateWithoutSiswaInput>
    create: XOR<UsersCreateWithoutSiswaInput, UsersUncheckedCreateWithoutSiswaInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSiswaInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSiswaInput, UsersUncheckedUpdateWithoutSiswaInput>
  }

  export type UsersUpdateWithoutSiswaInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan?: StanUpdateOneWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutSiswaInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    kode_verifikasi?: NullableStringFieldUpdateOperationsInput | string | null
    verifikasi_exp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan?: StanUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type StanCreateWithoutMenuInput = {
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Transaksi?: TransaksiCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonCreateNestedManyWithoutStan_detailInput
    users?: UsersCreateNestedOneWithoutStanInput
  }

  export type StanUncheckedCreateWithoutMenuInput = {
    id?: number
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonUncheckedCreateNestedManyWithoutStan_detailInput
  }

  export type StanCreateOrConnectWithoutMenuInput = {
    where: StanWhereUniqueInput
    create: XOR<StanCreateWithoutMenuInput, StanUncheckedCreateWithoutMenuInput>
  }

  export type MenuDiskonCreateWithoutMenu_detailInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    diskon_detail?: DiskonCreateNestedOneWithoutMenuDiskonInput
  }

  export type MenuDiskonUncheckedCreateWithoutMenu_detailInput = {
    id?: number
    id_diskon?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuDiskonCreateOrConnectWithoutMenu_detailInput = {
    where: MenuDiskonWhereUniqueInput
    create: XOR<MenuDiskonCreateWithoutMenu_detailInput, MenuDiskonUncheckedCreateWithoutMenu_detailInput>
  }

  export type MenuDiskonCreateManyMenu_detailInputEnvelope = {
    data: MenuDiskonCreateManyMenu_detailInput | MenuDiskonCreateManyMenu_detailInput[]
    skipDuplicates?: boolean
  }

  export type DetailTransaksiCreateWithoutMenu_detailInput = {
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transaksi_detail?: TransaksiCreateNestedOneWithoutDetailTransaksiInput
  }

  export type DetailTransaksiUncheckedCreateWithoutMenu_detailInput = {
    id?: number
    id_transaksi?: number
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetailTransaksiCreateOrConnectWithoutMenu_detailInput = {
    where: DetailTransaksiWhereUniqueInput
    create: XOR<DetailTransaksiCreateWithoutMenu_detailInput, DetailTransaksiUncheckedCreateWithoutMenu_detailInput>
  }

  export type DetailTransaksiCreateManyMenu_detailInputEnvelope = {
    data: DetailTransaksiCreateManyMenu_detailInput | DetailTransaksiCreateManyMenu_detailInput[]
    skipDuplicates?: boolean
  }

  export type StanUpsertWithoutMenuInput = {
    update: XOR<StanUpdateWithoutMenuInput, StanUncheckedUpdateWithoutMenuInput>
    create: XOR<StanCreateWithoutMenuInput, StanUncheckedCreateWithoutMenuInput>
    where?: StanWhereInput
  }

  export type StanUpdateToOneWithWhereWithoutMenuInput = {
    where?: StanWhereInput
    data: XOR<StanUpdateWithoutMenuInput, StanUncheckedUpdateWithoutMenuInput>
  }

  export type StanUpdateWithoutMenuInput = {
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transaksi?: TransaksiUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUpdateManyWithoutStan_detailNestedInput
    users?: UsersUpdateOneWithoutStanNestedInput
  }

  export type StanUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transaksi?: TransaksiUncheckedUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUncheckedUpdateManyWithoutStan_detailNestedInput
  }

  export type MenuDiskonUpsertWithWhereUniqueWithoutMenu_detailInput = {
    where: MenuDiskonWhereUniqueInput
    update: XOR<MenuDiskonUpdateWithoutMenu_detailInput, MenuDiskonUncheckedUpdateWithoutMenu_detailInput>
    create: XOR<MenuDiskonCreateWithoutMenu_detailInput, MenuDiskonUncheckedCreateWithoutMenu_detailInput>
  }

  export type MenuDiskonUpdateWithWhereUniqueWithoutMenu_detailInput = {
    where: MenuDiskonWhereUniqueInput
    data: XOR<MenuDiskonUpdateWithoutMenu_detailInput, MenuDiskonUncheckedUpdateWithoutMenu_detailInput>
  }

  export type MenuDiskonUpdateManyWithWhereWithoutMenu_detailInput = {
    where: MenuDiskonScalarWhereInput
    data: XOR<MenuDiskonUpdateManyMutationInput, MenuDiskonUncheckedUpdateManyWithoutMenu_detailInput>
  }

  export type MenuDiskonScalarWhereInput = {
    AND?: MenuDiskonScalarWhereInput | MenuDiskonScalarWhereInput[]
    OR?: MenuDiskonScalarWhereInput[]
    NOT?: MenuDiskonScalarWhereInput | MenuDiskonScalarWhereInput[]
    id?: IntFilter<"MenuDiskon"> | number
    id_menu?: IntFilter<"MenuDiskon"> | number
    id_diskon?: IntFilter<"MenuDiskon"> | number
    createdAt?: DateTimeFilter<"MenuDiskon"> | Date | string
    updatedAt?: DateTimeFilter<"MenuDiskon"> | Date | string
  }

  export type DetailTransaksiUpsertWithWhereUniqueWithoutMenu_detailInput = {
    where: DetailTransaksiWhereUniqueInput
    update: XOR<DetailTransaksiUpdateWithoutMenu_detailInput, DetailTransaksiUncheckedUpdateWithoutMenu_detailInput>
    create: XOR<DetailTransaksiCreateWithoutMenu_detailInput, DetailTransaksiUncheckedCreateWithoutMenu_detailInput>
  }

  export type DetailTransaksiUpdateWithWhereUniqueWithoutMenu_detailInput = {
    where: DetailTransaksiWhereUniqueInput
    data: XOR<DetailTransaksiUpdateWithoutMenu_detailInput, DetailTransaksiUncheckedUpdateWithoutMenu_detailInput>
  }

  export type DetailTransaksiUpdateManyWithWhereWithoutMenu_detailInput = {
    where: DetailTransaksiScalarWhereInput
    data: XOR<DetailTransaksiUpdateManyMutationInput, DetailTransaksiUncheckedUpdateManyWithoutMenu_detailInput>
  }

  export type DetailTransaksiScalarWhereInput = {
    AND?: DetailTransaksiScalarWhereInput | DetailTransaksiScalarWhereInput[]
    OR?: DetailTransaksiScalarWhereInput[]
    NOT?: DetailTransaksiScalarWhereInput | DetailTransaksiScalarWhereInput[]
    id?: IntFilter<"DetailTransaksi"> | number
    id_transaksi?: IntFilter<"DetailTransaksi"> | number
    id_menu?: IntFilter<"DetailTransaksi"> | number
    qty?: IntFilter<"DetailTransaksi"> | number
    harga_beli?: FloatFilter<"DetailTransaksi"> | number
    createdAt?: DateTimeFilter<"DetailTransaksi"> | Date | string
    updatedAt?: DateTimeFilter<"DetailTransaksi"> | Date | string
  }

  export type StanCreateWithoutDiskonInput = {
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuCreateNestedManyWithoutStan_detailInput
    Transaksi?: TransaksiCreateNestedManyWithoutStan_detailInput
    users?: UsersCreateNestedOneWithoutStanInput
  }

  export type StanUncheckedCreateWithoutDiskonInput = {
    id?: number
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuUncheckedCreateNestedManyWithoutStan_detailInput
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutStan_detailInput
  }

  export type StanCreateOrConnectWithoutDiskonInput = {
    where: StanWhereUniqueInput
    create: XOR<StanCreateWithoutDiskonInput, StanUncheckedCreateWithoutDiskonInput>
  }

  export type MenuDiskonCreateWithoutDiskon_detailInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    menu_detail?: MenuCreateNestedOneWithoutMenuDiskonInput
  }

  export type MenuDiskonUncheckedCreateWithoutDiskon_detailInput = {
    id?: number
    id_menu?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuDiskonCreateOrConnectWithoutDiskon_detailInput = {
    where: MenuDiskonWhereUniqueInput
    create: XOR<MenuDiskonCreateWithoutDiskon_detailInput, MenuDiskonUncheckedCreateWithoutDiskon_detailInput>
  }

  export type MenuDiskonCreateManyDiskon_detailInputEnvelope = {
    data: MenuDiskonCreateManyDiskon_detailInput | MenuDiskonCreateManyDiskon_detailInput[]
    skipDuplicates?: boolean
  }

  export type StanUpsertWithoutDiskonInput = {
    update: XOR<StanUpdateWithoutDiskonInput, StanUncheckedUpdateWithoutDiskonInput>
    create: XOR<StanCreateWithoutDiskonInput, StanUncheckedCreateWithoutDiskonInput>
    where?: StanWhereInput
  }

  export type StanUpdateToOneWithWhereWithoutDiskonInput = {
    where?: StanWhereInput
    data: XOR<StanUpdateWithoutDiskonInput, StanUncheckedUpdateWithoutDiskonInput>
  }

  export type StanUpdateWithoutDiskonInput = {
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUpdateManyWithoutStan_detailNestedInput
    Transaksi?: TransaksiUpdateManyWithoutStan_detailNestedInput
    users?: UsersUpdateOneWithoutStanNestedInput
  }

  export type StanUncheckedUpdateWithoutDiskonInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUncheckedUpdateManyWithoutStan_detailNestedInput
    Transaksi?: TransaksiUncheckedUpdateManyWithoutStan_detailNestedInput
  }

  export type MenuDiskonUpsertWithWhereUniqueWithoutDiskon_detailInput = {
    where: MenuDiskonWhereUniqueInput
    update: XOR<MenuDiskonUpdateWithoutDiskon_detailInput, MenuDiskonUncheckedUpdateWithoutDiskon_detailInput>
    create: XOR<MenuDiskonCreateWithoutDiskon_detailInput, MenuDiskonUncheckedCreateWithoutDiskon_detailInput>
  }

  export type MenuDiskonUpdateWithWhereUniqueWithoutDiskon_detailInput = {
    where: MenuDiskonWhereUniqueInput
    data: XOR<MenuDiskonUpdateWithoutDiskon_detailInput, MenuDiskonUncheckedUpdateWithoutDiskon_detailInput>
  }

  export type MenuDiskonUpdateManyWithWhereWithoutDiskon_detailInput = {
    where: MenuDiskonScalarWhereInput
    data: XOR<MenuDiskonUpdateManyMutationInput, MenuDiskonUncheckedUpdateManyWithoutDiskon_detailInput>
  }

  export type MenuCreateWithoutMenuDiskonInput = {
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutMenuInput
    DetailTransaksi?: DetailTransaksiCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuUncheckedCreateWithoutMenuDiskonInput = {
    id?: number
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    id_stan?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    DetailTransaksi?: DetailTransaksiUncheckedCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuCreateOrConnectWithoutMenuDiskonInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutMenuDiskonInput, MenuUncheckedCreateWithoutMenuDiskonInput>
  }

  export type DiskonCreateWithoutMenuDiskonInput = {
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutDiskonInput
  }

  export type DiskonUncheckedCreateWithoutMenuDiskonInput = {
    id?: number
    id_stan?: number
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiskonCreateOrConnectWithoutMenuDiskonInput = {
    where: DiskonWhereUniqueInput
    create: XOR<DiskonCreateWithoutMenuDiskonInput, DiskonUncheckedCreateWithoutMenuDiskonInput>
  }

  export type MenuUpsertWithoutMenuDiskonInput = {
    update: XOR<MenuUpdateWithoutMenuDiskonInput, MenuUncheckedUpdateWithoutMenuDiskonInput>
    create: XOR<MenuCreateWithoutMenuDiskonInput, MenuUncheckedCreateWithoutMenuDiskonInput>
    where?: MenuWhereInput
  }

  export type MenuUpdateToOneWithWhereWithoutMenuDiskonInput = {
    where?: MenuWhereInput
    data: XOR<MenuUpdateWithoutMenuDiskonInput, MenuUncheckedUpdateWithoutMenuDiskonInput>
  }

  export type MenuUpdateWithoutMenuDiskonInput = {
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutMenuNestedInput
    DetailTransaksi?: DetailTransaksiUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuUncheckedUpdateWithoutMenuDiskonInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    id_stan?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DetailTransaksi?: DetailTransaksiUncheckedUpdateManyWithoutMenu_detailNestedInput
  }

  export type DiskonUpsertWithoutMenuDiskonInput = {
    update: XOR<DiskonUpdateWithoutMenuDiskonInput, DiskonUncheckedUpdateWithoutMenuDiskonInput>
    create: XOR<DiskonCreateWithoutMenuDiskonInput, DiskonUncheckedCreateWithoutMenuDiskonInput>
    where?: DiskonWhereInput
  }

  export type DiskonUpdateToOneWithWhereWithoutMenuDiskonInput = {
    where?: DiskonWhereInput
    data: XOR<DiskonUpdateWithoutMenuDiskonInput, DiskonUncheckedUpdateWithoutMenuDiskonInput>
  }

  export type DiskonUpdateWithoutMenuDiskonInput = {
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutDiskonNestedInput
  }

  export type DiskonUncheckedUpdateWithoutMenuDiskonInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_stan?: IntFieldUpdateOperationsInput | number
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StanCreateWithoutTransaksiInput = {
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonCreateNestedManyWithoutStan_detailInput
    users?: UsersCreateNestedOneWithoutStanInput
  }

  export type StanUncheckedCreateWithoutTransaksiInput = {
    id?: number
    nama_stan?: string
    nama_pemilik?: string
    telp?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Menu?: MenuUncheckedCreateNestedManyWithoutStan_detailInput
    Diskon?: DiskonUncheckedCreateNestedManyWithoutStan_detailInput
  }

  export type StanCreateOrConnectWithoutTransaksiInput = {
    where: StanWhereUniqueInput
    create: XOR<StanCreateWithoutTransaksiInput, StanUncheckedCreateWithoutTransaksiInput>
  }

  export type SiswaCreateWithoutTransaksiInput = {
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UsersCreateNestedOneWithoutSiswaInput
  }

  export type SiswaUncheckedCreateWithoutTransaksiInput = {
    id?: number
    nama_siswa?: string
    alamat?: string
    telp?: string
    foto?: string
    id_user?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiswaCreateOrConnectWithoutTransaksiInput = {
    where: SiswaWhereUniqueInput
    create: XOR<SiswaCreateWithoutTransaksiInput, SiswaUncheckedCreateWithoutTransaksiInput>
  }

  export type DetailTransaksiCreateWithoutTransaksi_detailInput = {
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    menu_detail?: MenuCreateNestedOneWithoutDetailTransaksiInput
  }

  export type DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput = {
    id?: number
    id_menu?: number
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetailTransaksiCreateOrConnectWithoutTransaksi_detailInput = {
    where: DetailTransaksiWhereUniqueInput
    create: XOR<DetailTransaksiCreateWithoutTransaksi_detailInput, DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput>
  }

  export type DetailTransaksiCreateManyTransaksi_detailInputEnvelope = {
    data: DetailTransaksiCreateManyTransaksi_detailInput | DetailTransaksiCreateManyTransaksi_detailInput[]
    skipDuplicates?: boolean
  }

  export type StanUpsertWithoutTransaksiInput = {
    update: XOR<StanUpdateWithoutTransaksiInput, StanUncheckedUpdateWithoutTransaksiInput>
    create: XOR<StanCreateWithoutTransaksiInput, StanUncheckedCreateWithoutTransaksiInput>
    where?: StanWhereInput
  }

  export type StanUpdateToOneWithWhereWithoutTransaksiInput = {
    where?: StanWhereInput
    data: XOR<StanUpdateWithoutTransaksiInput, StanUncheckedUpdateWithoutTransaksiInput>
  }

  export type StanUpdateWithoutTransaksiInput = {
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUpdateManyWithoutStan_detailNestedInput
    users?: UsersUpdateOneWithoutStanNestedInput
  }

  export type StanUncheckedUpdateWithoutTransaksiInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_stan?: StringFieldUpdateOperationsInput | string
    nama_pemilik?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuUncheckedUpdateManyWithoutStan_detailNestedInput
    Diskon?: DiskonUncheckedUpdateManyWithoutStan_detailNestedInput
  }

  export type SiswaUpsertWithoutTransaksiInput = {
    update: XOR<SiswaUpdateWithoutTransaksiInput, SiswaUncheckedUpdateWithoutTransaksiInput>
    create: XOR<SiswaCreateWithoutTransaksiInput, SiswaUncheckedCreateWithoutTransaksiInput>
    where?: SiswaWhereInput
  }

  export type SiswaUpdateToOneWithWhereWithoutTransaksiInput = {
    where?: SiswaWhereInput
    data: XOR<SiswaUpdateWithoutTransaksiInput, SiswaUncheckedUpdateWithoutTransaksiInput>
  }

  export type SiswaUpdateWithoutTransaksiInput = {
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneWithoutSiswaNestedInput
  }

  export type SiswaUncheckedUpdateWithoutTransaksiInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_siswa?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    telp?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiUpsertWithWhereUniqueWithoutTransaksi_detailInput = {
    where: DetailTransaksiWhereUniqueInput
    update: XOR<DetailTransaksiUpdateWithoutTransaksi_detailInput, DetailTransaksiUncheckedUpdateWithoutTransaksi_detailInput>
    create: XOR<DetailTransaksiCreateWithoutTransaksi_detailInput, DetailTransaksiUncheckedCreateWithoutTransaksi_detailInput>
  }

  export type DetailTransaksiUpdateWithWhereUniqueWithoutTransaksi_detailInput = {
    where: DetailTransaksiWhereUniqueInput
    data: XOR<DetailTransaksiUpdateWithoutTransaksi_detailInput, DetailTransaksiUncheckedUpdateWithoutTransaksi_detailInput>
  }

  export type DetailTransaksiUpdateManyWithWhereWithoutTransaksi_detailInput = {
    where: DetailTransaksiScalarWhereInput
    data: XOR<DetailTransaksiUpdateManyMutationInput, DetailTransaksiUncheckedUpdateManyWithoutTransaksi_detailInput>
  }

  export type TransaksiCreateWithoutDetailTransaksiInput = {
    tanggal?: Date | string
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutTransaksiInput
    siswa_detail?: SiswaCreateNestedOneWithoutTransaksiInput
  }

  export type TransaksiUncheckedCreateWithoutDetailTransaksiInput = {
    id?: number
    tanggal?: Date | string
    id_stan?: number
    id_siswa?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransaksiCreateOrConnectWithoutDetailTransaksiInput = {
    where: TransaksiWhereUniqueInput
    create: XOR<TransaksiCreateWithoutDetailTransaksiInput, TransaksiUncheckedCreateWithoutDetailTransaksiInput>
  }

  export type MenuCreateWithoutDetailTransaksiInput = {
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stan_detail?: StanCreateNestedOneWithoutMenuInput
    MenuDiskon?: MenuDiskonCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuUncheckedCreateWithoutDetailTransaksiInput = {
    id?: number
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    id_stan?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    MenuDiskon?: MenuDiskonUncheckedCreateNestedManyWithoutMenu_detailInput
  }

  export type MenuCreateOrConnectWithoutDetailTransaksiInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutDetailTransaksiInput, MenuUncheckedCreateWithoutDetailTransaksiInput>
  }

  export type TransaksiUpsertWithoutDetailTransaksiInput = {
    update: XOR<TransaksiUpdateWithoutDetailTransaksiInput, TransaksiUncheckedUpdateWithoutDetailTransaksiInput>
    create: XOR<TransaksiCreateWithoutDetailTransaksiInput, TransaksiUncheckedCreateWithoutDetailTransaksiInput>
    where?: TransaksiWhereInput
  }

  export type TransaksiUpdateToOneWithWhereWithoutDetailTransaksiInput = {
    where?: TransaksiWhereInput
    data: XOR<TransaksiUpdateWithoutDetailTransaksiInput, TransaksiUncheckedUpdateWithoutDetailTransaksiInput>
  }

  export type TransaksiUpdateWithoutDetailTransaksiInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutTransaksiNestedInput
    siswa_detail?: SiswaUpdateOneRequiredWithoutTransaksiNestedInput
  }

  export type TransaksiUncheckedUpdateWithoutDetailTransaksiInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_stan?: IntFieldUpdateOperationsInput | number
    id_siswa?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuUpsertWithoutDetailTransaksiInput = {
    update: XOR<MenuUpdateWithoutDetailTransaksiInput, MenuUncheckedUpdateWithoutDetailTransaksiInput>
    create: XOR<MenuCreateWithoutDetailTransaksiInput, MenuUncheckedCreateWithoutDetailTransaksiInput>
    where?: MenuWhereInput
  }

  export type MenuUpdateToOneWithWhereWithoutDetailTransaksiInput = {
    where?: MenuWhereInput
    data: XOR<MenuUpdateWithoutDetailTransaksiInput, MenuUncheckedUpdateWithoutDetailTransaksiInput>
  }

  export type MenuUpdateWithoutDetailTransaksiInput = {
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutMenuNestedInput
    MenuDiskon?: MenuDiskonUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuUncheckedUpdateWithoutDetailTransaksiInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    id_stan?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUncheckedUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuCreateManyStan_detailInput = {
    id?: number
    nama_makanan?: string
    jenis?: $Enums.JENIS
    harga?: number
    foto?: string
    deskripsi?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransaksiCreateManyStan_detailInput = {
    id?: number
    tanggal?: Date | string
    id_siswa?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiskonCreateManyStan_detailInput = {
    id?: number
    nama_diskon?: string
    persentase_diskon?: number
    tanggal_awal?: Date | string
    tanggal_akhir?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuUpdateWithoutStan_detailInput = {
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUpdateManyWithoutMenu_detailNestedInput
    DetailTransaksi?: DetailTransaksiUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuUncheckedUpdateWithoutStan_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUncheckedUpdateManyWithoutMenu_detailNestedInput
    DetailTransaksi?: DetailTransaksiUncheckedUpdateManyWithoutMenu_detailNestedInput
  }

  export type MenuUncheckedUpdateManyWithoutStan_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_makanan?: StringFieldUpdateOperationsInput | string
    jenis?: EnumJENISFieldUpdateOperationsInput | $Enums.JENIS
    harga?: FloatFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaksiUpdateWithoutStan_detailInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siswa_detail?: SiswaUpdateOneRequiredWithoutTransaksiNestedInput
    DetailTransaksi?: DetailTransaksiUpdateManyWithoutTransaksi_detailNestedInput
  }

  export type TransaksiUncheckedUpdateWithoutStan_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_siswa?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DetailTransaksi?: DetailTransaksiUncheckedUpdateManyWithoutTransaksi_detailNestedInput
  }

  export type TransaksiUncheckedUpdateManyWithoutStan_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_siswa?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiskonUpdateWithoutStan_detailInput = {
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUpdateManyWithoutDiskon_detailNestedInput
  }

  export type DiskonUncheckedUpdateWithoutStan_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MenuDiskon?: MenuDiskonUncheckedUpdateManyWithoutDiskon_detailNestedInput
  }

  export type DiskonUncheckedUpdateManyWithoutStan_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_diskon?: StringFieldUpdateOperationsInput | string
    persentase_diskon?: FloatFieldUpdateOperationsInput | number
    tanggal_awal?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggal_akhir?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransaksiCreateManySiswa_detailInput = {
    id?: number
    tanggal?: Date | string
    id_stan?: number
    status?: $Enums.STATUS
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransaksiUpdateWithoutSiswa_detailInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stan_detail?: StanUpdateOneRequiredWithoutTransaksiNestedInput
    DetailTransaksi?: DetailTransaksiUpdateManyWithoutTransaksi_detailNestedInput
  }

  export type TransaksiUncheckedUpdateWithoutSiswa_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_stan?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    DetailTransaksi?: DetailTransaksiUncheckedUpdateManyWithoutTransaksi_detailNestedInput
  }

  export type TransaksiUncheckedUpdateManyWithoutSiswa_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    id_stan?: IntFieldUpdateOperationsInput | number
    status?: EnumSTATUSFieldUpdateOperationsInput | $Enums.STATUS
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonCreateManyMenu_detailInput = {
    id?: number
    id_diskon?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetailTransaksiCreateManyMenu_detailInput = {
    id?: number
    id_transaksi?: number
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuDiskonUpdateWithoutMenu_detailInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    diskon_detail?: DiskonUpdateOneRequiredWithoutMenuDiskonNestedInput
  }

  export type MenuDiskonUncheckedUpdateWithoutMenu_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_diskon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonUncheckedUpdateManyWithoutMenu_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_diskon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiUpdateWithoutMenu_detailInput = {
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaksi_detail?: TransaksiUpdateOneRequiredWithoutDetailTransaksiNestedInput
  }

  export type DetailTransaksiUncheckedUpdateWithoutMenu_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_transaksi?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiUncheckedUpdateManyWithoutMenu_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_transaksi?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonCreateManyDiskon_detailInput = {
    id?: number
    id_menu?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuDiskonUpdateWithoutDiskon_detailInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu_detail?: MenuUpdateOneRequiredWithoutMenuDiskonNestedInput
  }

  export type MenuDiskonUncheckedUpdateWithoutDiskon_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuDiskonUncheckedUpdateManyWithoutDiskon_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiCreateManyTransaksi_detailInput = {
    id?: number
    id_menu?: number
    qty?: number
    harga_beli?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetailTransaksiUpdateWithoutTransaksi_detailInput = {
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menu_detail?: MenuUpdateOneRequiredWithoutDetailTransaksiNestedInput
  }

  export type DetailTransaksiUncheckedUpdateWithoutTransaksi_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailTransaksiUncheckedUpdateManyWithoutTransaksi_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_menu?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    harga_beli?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StanCountOutputTypeDefaultArgs instead
     */
    export type StanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiswaCountOutputTypeDefaultArgs instead
     */
    export type SiswaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiswaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuCountOutputTypeDefaultArgs instead
     */
    export type MenuCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiskonCountOutputTypeDefaultArgs instead
     */
    export type DiskonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiskonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransaksiCountOutputTypeDefaultArgs instead
     */
    export type TransaksiCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransaksiCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StanDefaultArgs instead
     */
    export type StanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiswaDefaultArgs instead
     */
    export type SiswaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiswaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuDefaultArgs instead
     */
    export type MenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiskonDefaultArgs instead
     */
    export type DiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiskonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuDiskonDefaultArgs instead
     */
    export type MenuDiskonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuDiskonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransaksiDefaultArgs instead
     */
    export type TransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransaksiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DetailTransaksiDefaultArgs instead
     */
    export type DetailTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DetailTransaksiDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}